<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Wed Sep 14, 2022 22:03 (UTC+02) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -xslt -main -ll 3 -backtrack -name CSS3 -tree -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 21, 21, 22, 23, 24, 25, 26, 21, 27, 28, 10, 29, 30, 10, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 35, 36, 37, 38, 33, 10, 39, 40, 41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
    66, 10
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 90, 122, 185, 153, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
    216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 21, 27, 28, 10, 29, 30, 10, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33, 33, 33, 33, 33, 35, 36, 37, 38, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 33, 33
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    2561, 3074, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 1098, 75, 1100, 1101
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3667, 2176, 2191, 2253, 2206, 5603, 4053, 2283, 5367, 2484, 6679, 3501, 3282, 2322, 5774, 6573, 6976, 5779, 6537, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3615, 2176, 2191, 2253, 2206, 3437, 4053, 6945, 3541, 2484, 2490, 5532, 3282, 2359,
    5774, 3510, 3475, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3667, 2176, 2191, 2253, 2268, 5603, 4053, 6945,
    2387, 2484, 6915, 2411, 2858, 2436, 3674, 2420, 3684, 3679, 2306, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 6424, 2176,
    2191, 2253, 2206, 5032, 4053, 2283, 5527, 2484, 2490, 5532, 3282, 2359, 5774, 3510, 3475, 3470, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 2548, 2856, 2854, 2334, 3283, 6382, 3961, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2476, 4315, 2506, 2519, 2535, 5032, 3437, 3437, 2572, 3437, 2770, 3437, 4118, 3437, 2773, 3437,
    3436, 3085, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 4867, 4877, 2594, 6382, 3437, 3438, 4418, 3437,
    3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 3945, 3958,
    3283, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 2548, 2856, 2854, 3437, 3283, 6382, 3437, 2731, 4418, 2725, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 3437, 3283, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2298, 4947, 2623, 2636, 2652, 5032, 3437, 3438, 3355, 3437, 2734, 3437,
    3439, 3437, 2737, 3438, 3437, 6584, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2997, 3437, 3437, 6116, 2688, 5192,
    3437, 3420, 4478, 3437, 5842, 2717, 4713, 2753, 2789, 3438, 2799, 2794, 2767, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    2930, 5871, 3437, 5866, 2815, 5032, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 5854, 2874, 5307, 2902, 2917, 6731, 3437, 3438, 5235, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 3620, 2984, 6382, 3437, 3900, 4418, 3437, 3284, 3437, 3282, 3437,
    3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 7053, 3022, 4854, 3041, 7040, 6382, 3025, 6589,
    4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3191, 3109,
    3148, 3163, 3178, 6693, 4425, 5436, 5738, 3437, 4358, 3216, 4356, 3241, 4202, 3281, 3275, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 2548, 2856, 3122, 3132, 3300, 6382, 3437, 3340, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2219, 3377, 4794, 4807, 3392, 4345, 3437, 3438, 5272, 3437, 3284, 3437, 3282, 3437, 3426, 3438,
    3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 5608, 3455, 3491, 3772, 3526, 3565, 2941,
    5496, 3600, 3636, 3652, 3700, 3739, 3755, 4207, 3771, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 5608,
    3455, 3491, 3772, 3526, 3565, 2968, 5496, 3788, 6199, 3815, 3700, 3842, 3858, 4207, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 2548, 2856, 2854, 5608, 3455, 3491, 3772, 3526, 3565, 3052, 5496, 3874, 3916, 3932, 3700, 3977, 3993, 6885, 4424, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 5608, 3455, 3491, 3772, 3526, 3565, 2968, 5496, 3788, 6199, 4009, 3700, 4069, 4085, 4207,
    4023, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 5608, 3455, 3491, 3772, 3526, 3565, 3052, 5496, 3874,
    3916, 3932, 3700, 4101, 3993, 6885, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 2854, 5608, 3455, 3491,
    3772, 3526, 3565, 2968, 5496, 3788, 6199, 4009, 3700, 4069, 4085, 4207, 4023, 4117, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    2548, 2856, 2854, 5608, 3455, 3491, 3772, 3526, 3565, 2968, 5496, 3788, 6199, 3815, 3700, 3842, 3858, 6087, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 2828, 4134, 4171, 3324, 4187, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2701, 4223, 4690, 4702, 7061, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437,
    3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 4299, 4312, 3283, 6382, 3889, 3438,
    4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856,
    2854, 3437, 2460, 6382, 3437, 6232, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 2548, 2856, 4604, 4765, 4617, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 6864, 4374, 3772, 4403, 3565, 2228, 5496, 3788, 6199, 3815, 3700, 3842,
    3858, 4207, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 5738, 3437,
    4358, 6701, 4356, 4441, 4202, 3281, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133,
    5146, 4522, 4425, 4463, 5738, 5375, 4508, 6701, 4356, 4441, 4202, 3281, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 2548, 2856, 3713, 3723, 4546, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 4754, 4591, 4633, 4648, 4661, 4677, 6546, 4739, 4908, 5042, 4825, 4781, 4823, 4841, 5668, 4893, 5678, 5673,
    3549, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 4938, 4387, 4944, 3283, 6382, 3437, 3438, 4418, 3437, 3284, 3437,
    3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 4036, 4049, 3283, 6382,
    3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3313, 4963, 5018, 5118, 5088, 4374, 3772, 4403, 3565, 2228, 6774, 3788, 6278, 3815, 3700, 5162, 3858, 4723, 2448, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 5178, 5133, 6864, 4374, 3772, 4403, 3565, 2228, 5496, 3788, 6199, 3815, 3700, 3842, 3858, 4155, 4424, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 6864, 4374, 3006, 5220, 3565, 2237, 5946, 3788, 6199, 3815,
    3700, 3842, 3858, 4207, 5241, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 6864, 4374, 3772, 5257,
    3565, 5294, 4575, 3788, 5992, 3815, 3700, 3842, 3858, 4207, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260,
    4331, 5133, 6864, 5323, 3772, 5352, 3565, 2950, 5391, 5407, 6199, 5423, 5452, 3842, 3858, 5483, 3063, 6228, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 6864, 4374, 3772, 5512, 5548, 2959, 6308, 3788, 6199, 5589, 3700, 3842, 5624, 4207, 3361, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 6023, 3437, 4358, 6701, 4145, 4441, 4202, 3281,
    6761, 5779, 2578, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 5738, 5374,
    5640, 5694, 4356, 4441, 4202, 3281, 5784, 6153, 4424, 3074, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133,
    5146, 5654, 2343, 5723, 5738, 2395, 6338, 6701, 6077, 4441, 5467, 3281, 5784, 5779, 5062, 3580, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 5738, 3437, 4358, 6701, 4356, 4441, 4202, 5768, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 5800, 4331, 5133, 5146, 4522, 4425, 4403, 6184, 3407, 5707, 6701, 4356, 5829, 4202, 3281, 5784, 4244,
    4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 3250, 5887, 5738, 2371, 5918, 6701,
    3799, 4441, 4561, 5962, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 6851, 5146, 4522,
    3259, 6008, 5738, 6393, 4358, 6064, 4356, 4441, 4202, 4922, 5784, 5779, 3093, 5072, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3313, 4260, 4331, 6836, 5146, 4522, 6103, 4403, 5738, 5052, 4358, 6701, 6143, 6132, 5563, 4492, 6048, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 6169, 5977, 6432, 6482, 4530, 3826, 4441, 4202, 3281, 5784, 6971, 2841, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 6215, 4331, 5133, 5146, 6352, 3200, 6248, 5738, 6958, 6619, 6294, 4234, 6324,
    6038, 5752, 5784, 6508, 5278, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 6821, 5146, 4522, 4425, 4463,
    5738, 5375, 4508, 6701, 4356, 4441, 4202, 4447, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260,
    6368, 5133, 5146, 5932, 4425, 6409, 6263, 6448, 5813, 6468, 6498, 6524, 4202, 3225, 5573, 6562, 6605, 6635, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3313, 6665, 6717, 5103, 6747, 4522, 4425, 4403, 5738, 3437, 4358, 6701, 4356, 4441, 4202, 3281, 5784, 5779, 4424, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 6790, 5738, 2556, 6649, 6701, 4356, 4441, 4202, 3281,
    5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 5738, 3437,
    6806, 6701, 4356, 4441, 4202, 3281, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133,
    5146, 4522, 4425, 4403, 5738, 6452, 4358, 6701, 4356, 4441, 6880, 3281, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 5738, 3437, 4358, 6901, 4356, 4441, 4202, 3281, 5784, 5779, 4424, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3313, 4260, 4331, 5133, 5146, 4522, 4425, 4403, 5902, 3437, 4358, 6701, 4356, 4441, 4202, 3281, 5784, 5779,
    4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2665, 6931, 6992, 2672, 2886, 6382, 3437, 3438, 4418, 3437, 3284, 3437,
    3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 2607, 6994, 5336, 7010, 7025, 6382,
    3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    2548, 7077, 4976, 4989, 5002, 6382, 3437, 3438, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 2548, 2856, 4273, 4286, 5204, 6382, 3437, 3584, 4418, 3437, 3284, 3437, 3282, 3437, 3426, 3438, 3436, 3431, 3437, 3437,
    3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 6424, 2176, 2191, 2253, 2206, 5032, 4053, 2283, 5527, 2484, 2490, 5532, 3282, 2359,
    5774, 3510, 3475, 5779, 4424, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 3437, 0, 3587, 3603, 3587, 3587, 3587, 3587, 3587,
    3587, 3587, 0, 0, 0, 3587, 3587, 3587, 0, 0, 3587, 3587, 3587, 3587, 0, 3587, 3603, 3587, 3603, 3587, 3587, 3587, 3587, 3704, 3708, 3587, 3709, 3709, 3587,
    3709, 3708, 3587, 3708, 3587, 3587, 2561, 3074, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8899, 0, 0, 0, 0, 0, 0, 0, 0, 8899, 154, 0, 0, 0, 0, 0, 0, 12288,
    3603, 3587, 0, 0, 3694, 3587, 0, 0, 3694, 3587, 3587, 118, 0, 0, 3704, 3587, 3704, 3708, 3587, 3709, 3709, 3587, 3709, 3708, 3587, 3708, 3587, 3587, 2688,
    3202, 0, 0, 163, 0, 0, 118, 0, 3704, 0, 0, 0, 3708, 3709, 0, 0, 2561, 0, 0, 0, 0, 85, 0, 13824, 0, 0, 0, 0, 0, 0, 0, 0, 8406, 0, 0, 0, 0, 0, 0, 0, 6737,
    6745, 0, 0, 0, 8296, 8296, 0, 0, 0, 0, 151, 0, 0, 0, 0, 109, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 149, 0, 0, 0, 6737, 6745, 0, 0, 0, 0,
    8296, 0, 0, 0, 0, 151, 0, 0, 0, 0, 190, 0, 0, 0, 159, 12288, 0, 12288, 0, 0, 12288, 0, 2688, 0, 3202, 6831, 85, 0, 6833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
    0, 0, 0, 0, 0, 0, 0, 6833, 0, 0, 0, 0, 0, 0, 0, 8406, 0, 0, 0, 0, 0, 0, 269, 0, 0, 0, 0, 0, 0, 0, 2688, 6831, 6833, 0, 0, 0, 0, 8406, 0, 0, 0, 0, 246, 0, 0,
    0, 0, 302, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 10240, 10240, 0, 10240, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 3074, 0, 0, 0, 85, 13312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 6737, 0, 0, 13312, 13312, 13312, 0, 13312, 0, 13312, 13312, 13312, 13312, 13312, 13312, 0, 0, 0, 13312, 0, 0,
    0, 13312, 0, 0, 13312, 0, 0, 13312, 0, 0, 13312, 13312, 0, 0, 0, 13312, 0, 13312, 0, 13312, 0, 13312, 2561, 3074, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    162, 0, 0, 0, 0, 0, 0, 0, 0, 3074, 3074, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 310, 104, 112, 112, 104, 104, 104, 104, 104, 112, 104,
    112, 104, 104, 2561, 3074, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33792, 0, 0, 13824, 13824, 13824, 0, 13824, 0, 13824, 13824, 13824, 13824, 13824, 13824,
    0, 0, 0, 13824, 0, 0, 0, 13824, 0, 0, 13824, 0, 0, 13824, 0, 0, 13824, 13824, 0, 0, 0, 13824, 0, 13824, 0, 13824, 0, 13824, 2561, 3074, 0, 0, 0, 85, 0, 0,
    0, 0, 0, 0, 0, 0, 33280, 0, 33280, 33280, 0, 0, 0, 0, 0, 14336, 0, 0, 14336, 14336, 14336, 14336, 14336, 0, 14336, 0, 14336, 14336, 2561, 3074, 0, 0, 0, 85,
    0, 0, 0, 0, 0, 0, 0, 19456, 0, 0, 7168, 7168, 7168, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 0, 0, 0,
    0, 0, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3074, 0, 0, 0, 0, 0, 0, 0, 27136, 0, 27136, 0, 0, 0,
    0, 2561, 3074, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0, 0, 14848, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
    18944, 0, 0, 0, 301, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2688, 3202, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    15360, 0, 0, 0, 0, 33280, 33280, 0, 33280, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 100, 0, 0, 0, 15360, 15360, 0, 0, 15360, 0, 0, 15360, 15360, 0, 15360, 0, 0,
    15360, 0, 0, 15360, 0, 0, 15360, 0, 15360, 15360, 2561, 3074, 0, 0, 0, 85, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 0, 191, 0, 8899, 7833, 0, 0, 0, 0, 0, 0, 0, 8899,
    156, 0, 0, 0, 0, 0, 0, 0, 8899, 157, 0, 0, 0, 0, 0, 0, 0, 8899, 7833, 0, 0, 0, 0, 0, 0, 0, 0, 9728, 9728, 0, 9728, 9728, 0, 9728, 9728, 0, 9728, 0, 0, 2561,
    3074, 0, 0, 0, 85, 0, 0, 14336, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 148, 0, 0, 0, 8856, 0, 1623, 10752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752, 0, 0,
    10752, 0, 16384, 16384, 10752, 0, 0, 16384, 10752, 0, 16384, 0, 0, 0, 0, 0, 192, 0, 8899, 7833, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0,
    312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 306, 0, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 88, 80, 0, 0, 0, 0,
    1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17408, 17408, 0, 0, 17408, 0, 114, 17408, 17408, 114, 17408, 0, 88, 80, 1623, 80, 80, 0, 0, 80, 80, 80, 80, 80, 80,
    0, 80, 0, 0, 0, 80, 80, 80, 0, 80, 80, 0, 17009, 80, 80, 17009, 80, 17009, 17017, 80, 0, 0, 80, 0, 17009, 80, 17009, 80, 80, 2561, 3074, 0, 80, 0, 85, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 30208, 0, 0, 0, 0, 0, 6745, 6745, 6745, 6745, 0, 0, 0, 0, 213, 8296, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 2561,
    6737, 6745, 0, 0, 0, 8296, 8296, 242, 0, 0, 0, 0, 0, 0, 0, 0, 8296, 144, 0, 0, 0, 0, 0, 0, 0, 8296, 145, 0, 147, 0, 0, 0, 151, 0, 3074, 6737, 6745, 281, 0,
    0, 8296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 17408, 114, 114, 17408, 17408, 17408, 17408, 17408, 114, 17408, 114, 17408, 17408,
    2561, 3074, 0, 6737, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19055, 19055, 0, 18944, 19055, 0, 0, 19055, 19055, 0, 19055, 114, 0, 114, 0, 0, 0, 0, 0, 114, 0,
    0, 0, 0, 0, 0, 2561, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 309, 0, 0, 1623, 0, 0, 17920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 17920, 0,
    95, 95, 95, 95, 95, 95, 95, 18015, 95, 95, 2561, 3074, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7168, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561,
    3074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 0, 7795, 7795, 0, 0, 0, 0, 0, 7795, 0, 7795, 0, 0, 2689, 3203, 0, 0, 292, 0, 2561, 3074,
    6737, 6745, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 224, 0, 6737, 6788, 85, 85, 85, 0, 1623, 0, 6745, 6791, 6745, 6745, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0,
    0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 2561, 7795, 7833, 7795, 6745, 6745, 0, 0, 0, 7795, 6737, 6737, 0, 0, 0, 0, 2561, 0, 3074, 6737, 0, 0, 6745, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 2733, 3074, 3246, 6832, 85, 0, 6834, 6745, 6745, 0, 0, 0, 0, 0, 8378, 0, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 11264, 0, 0, 2561, 6745, 6866, 6745, 6745, 0, 0, 0, 0, 0, 8407, 0, 0, 0, 0, 219, 0, 0, 3587, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9728, 0, 0, 9728, 0,
    221, 0, 8929, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2794, 3307, 6892, 6893, 0, 0, 0, 8296, 8433, 0, 0, 0, 245, 0, 247, 0, 249, 0, 0, 3587, 0, 5, 85,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2688, 3202, 6831, 6833, 0, 0, 0, 8406, 0, 0, 0, 0, 0, 0, 0, 290, 0, 8955, 0, 6745, 0, 6737, 0, 0, 0, 0, 2816, 3329, 6914,
    6915, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24064, 24064, 0, 0, 24064, 0, 0, 24064, 24064, 0, 24064, 8455, 0, 0, 0, 267, 0, 268, 0, 270, 0, 8976,
    0, 0, 0, 0, 2837, 3350, 6935, 6936, 0, 0, 0, 8476, 0, 0, 0, 0, 288, 0, 289, 0, 8704, 300, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 8856, 6745, 6866,
    6745, 6745, 0, 0, 0, 0, 0, 8407, 0, 0, 0, 0, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 233, 2561, 3074, 6892, 6893, 0, 0, 0, 8296, 8433, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 231, 0, 0, 2561, 3074, 8455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8976, 0, 0, 0, 0, 2837, 3350, 6935, 6936, 0, 0, 0, 8476, 0,
    0, 0, 0, 0, 0, 0, 0, 8704, 6745, 6866, 6745, 6745, 0, 0, 0, 0, 0, 8407, 0, 0, 0, 0, 192, 0, 0, 5632, 6144, 5120, 4608, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    9728, 0, 9728, 0, 0, 0, 9728, 9728, 0, 0, 2561, 222, 0, 8929, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2794, 3307, 6892, 6893, 0, 0, 0, 8296, 8433, 0,
    0, 0, 192, 0, 222, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 8455, 0, 0, 0, 192, 0, 222, 0, 0,
    271, 8976, 0, 0, 0, 0, 2837, 3350, 6935, 6936, 0, 0, 0, 8476, 0, 0, 0, 192, 222, 0, 0, 0, 8704, 6892, 6893, 0, 0, 0, 8296, 8433, 0, 0, 0, 0, 0, 0, 0, 250,
    0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 250, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 3694, 0, 0, 8455,
    0, 0, 0, 0, 0, 0, 0, 250, 0, 8976, 0, 0, 0, 0, 2837, 3350, 6935, 6936, 0, 0, 0, 8476, 0, 0, 0, 0, 0, 0, 250, 0, 8704, 8455, 0, 0, 0, 192, 0, 222, 0, 0, 0,
    8976, 0, 0, 0, 0, 2837, 26112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3074, 0, 1623, 0, 0, 0, 18944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6745, 6745, 228,
    6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8489, 0, 298, 0, 0, 18944, 18944, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18944, 19055, 0, 0,
    19055, 19055, 19055, 19055, 19055, 0, 19055, 0, 19055, 19055, 2561, 3074, 0, 0, 6745, 0, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8489, 0, 0, 0,
    0, 0, 1623, 0, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6883, 6745, 0, 6885, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 294, 0, 0, 8296, 0, 0, 0, 0, 0,
    1623, 0, 0, 0, 0, 0, 0, 0, 0, 6745, 6737, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 19968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 6745, 6737, 1623, 6737, 6737, 0, 0, 6737, 6737, 6737, 6737, 6737, 6737,
    0, 6737, 0, 84, 84, 15872, 1623, 0, 0, 6745, 0, 0, 0, 0, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 6737, 6788, 85, 85, 85, 0,
    1623, 6745, 6745, 6791, 6745, 6745, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24576, 0, 6745, 0, 0, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 0, 0,
    2561, 3074, 3074, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 0, 6737, 6745, 0, 0, 0, 8296, 8296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
    276, 2561, 6745, 0, 12288, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 3074, 0, 85, 0, 7168, 7168, 7168, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0,
    194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 0, 12288, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 85, 85, 85, 0, 1623, 6745, 6745, 6745,
    6745, 6745, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 218, 0, 0, 24064, 0, 0, 24064, 24064, 24064, 24064, 24064, 0, 24064, 0, 24064, 24064, 2561, 3074, 0, 0, 6745, 0,
    6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 260, 0, 0, 155, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2767, 3280, 6737, 6865, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0,
    90, 82, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20480, 0, 0, 20599, 20480, 20480, 20599, 20480, 0, 20606, 0, 20607, 20607, 2561, 3074, 0, 0, 90, 82,
    1623, 82, 82, 0, 0, 82, 82, 82, 82, 82, 82, 0, 82, 0, 0, 0, 82, 82, 82, 0, 82, 82, 0, 90, 82, 82, 90, 82, 82, 0, 0, 82, 0, 90, 82, 90, 82, 82, 2561, 3074,
    82, 82, 6737, 85, 85, 85, 0, 1623, 90, 90, 6745, 90, 90, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 19456, 0, 0, 0, 19456, 0, 0, 0, 19456, 0, 0, 0, 0, 0, 0,
    0, 7168, 32768, 0, 0, 32768, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8489, 0, 0, 299, 0, 90, 0, 0, 90, 90, 0, 0, 0, 82, 82, 82, 0, 0, 0, 0, 78, 79, 0,
    82, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20480, 20480, 0, 0, 20480, 0, 0, 20599, 20480, 0, 20599, 90, 90, 90, 90, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
    1623, 0, 0, 0, 0, 0, 0, 95, 17920, 95, 95, 0, 0, 0, 18015, 0, 95, 0, 18015, 0, 0, 0, 95, 95, 0, 95, 0, 223, 0, 0, 0, 90, 90, 0, 82, 82, 0, 0, 0, 0, 78, 79,
    82, 82, 82, 90, 0, 0, 0, 143, 143, 0, 0, 0, 0, 193, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 10752, 0, 10752, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    104, 104, 0, 0, 104, 0, 112, 104, 104, 112, 104, 143, 0, 0, 0, 0, 193, 0, 223, 0, 0, 0, 0, 0, 0, 0, 78, 79, 79, 82, 85, 0, 90, 90, 90, 0, 0, 0, 0, 0, 8296,
    0, 31232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 1623, 0, 0, 0, 0, 0, 24576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13824, 0, 0, 0, 1623, 0, 0, 0,
    0, 0, 0, 0, 0, 6747, 6737, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 34304, 34304, 34304, 34304, 34304, 34304, 0, 0, 0, 34304, 0, 0, 0, 34304, 0, 0, 0, 0, 34304, 0, 0,
    34304, 0, 0, 34304, 0, 34304, 0, 34304, 34304, 34304, 2561, 3074, 0, 0, 6747, 6737, 1623, 6737, 6737, 0, 0, 6737, 6737, 6737, 6737, 6737, 6737, 0, 6737, 85,
    85, 85, 0, 0, 0, 0, 6745, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 8296, 25905, 0, 0, 0, 0, 0, 0, 313, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 6737, 6772, 6778, 6737, 0, 0, 6737, 0, 6772, 6737, 6772, 6737, 6737, 2689, 3203, 6737, 0, 0, 0, 6737, 6737, 6737, 0, 6737, 6737, 0,
    6773, 6737, 6737, 6773, 6737, 0, 105, 105, 6737, 6737, 6737, 105, 6737, 6737, 105, 6772, 6737, 6737, 6772, 6737, 0, 0, 0, 6737, 6737, 6737, 0, 6737, 6737,
    0, 6745, 6737, 6737, 6745, 6737, 6737, 0, 0, 6737, 0, 6745, 6737, 6745, 6737, 6737, 2561, 3074, 6737, 8455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8976, 0, 0, 22291, 0,
    2837, 0, 6745, 6737, 1623, 6737, 6737, 0, 97, 6737, 6737, 6737, 6737, 6737, 6737, 0, 6737, 85, 85, 85, 0, 0, 0, 7168, 6745, 7168, 7168, 0, 0, 0, 0, 11264,
    11264, 0, 11264, 0, 0, 0, 0, 0, 2561, 3074, 0, 6745, 0, 154, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 169, 169, 2561, 3074, 3074, 0, 78469, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 308, 0, 0, 6745, 0, 155, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 3074, 0, 143872, 143872, 0, 0, 0,
    0, 0, 0, 0, 0, 8296, 0, 0, 0, 307, 0, 0, 0, 26624, 0, 0, 0, 0, 0, 0, 8899, 155, 0, 0, 0, 0, 0, 0, 0, 1623, 0, 15360, 0, 0, 0, 0, 0, 0, 0, 0, 100, 15360,
    6737, 6788, 85, 85, 85, 0, 1623, 6745, 6745, 6791, 6745, 6745, 138, 0, 0, 0, 1623, 0, 33792, 0, 0, 0, 0, 0, 0, 0, 0, 102, 33792, 6745, 0, 156, 6745, 6745,
    0, 0, 0, 6737, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 3074, 6737, 85, 0, 6745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 0, 0, 0, 0, 159, 0, 156, 6745, 6745,
    0, 6737, 6737, 0, 0, 205, 0, 2767, 3280, 6737, 6865, 6745, 6866, 6745, 6745, 0, 0, 0, 0, 0, 8407, 0, 0, 217, 0, 0, 220, 6892, 6893, 0, 0, 0, 8296, 8433, 0,
    243, 0, 0, 0, 0, 0, 0, 0, 6745, 6745, 0, 0, 0, 0, 6737, 6737, 0, 0, 0, 0, 2561, 8955, 0, 6745, 23552, 6737, 0, 0, 0, 255, 2816, 3329, 6914, 6915, 0, 261, 0,
    0, 6745, 0, 6737, 0, 0, 254, 0, 2561, 3074, 6737, 6745, 0, 0, 262, 291, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8489, 0, 0, 0, 0, 6745, 6745, 0, 6737,
    6737, 0, 0, 0, 0, 2767, 3280, 6737, 6865, 6745, 0, 157, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 3074, 6737, 85, 0, 6745, 0, 0, 0, 0,
    0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 2733, 3074, 3246, 6832, 85, 0, 6834, 6745, 6745, 181, 0, 0, 0, 0, 8378, 0, 0, 6745, 0, 6737, 0, 253, 0, 0, 2561, 3074,
    6737, 6745, 0, 0, 0, 8296, 0, 0, 287, 0, 0, 224, 0, 0, 0, 6892, 6893, 0, 0, 0, 8296, 8433, 0, 0, 0, 0, 0, 0, 248, 0, 0, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 7795, 0, 0, 7795, 0, 3350, 6935, 6936, 0, 282, 0, 8476, 285, 0, 0, 0, 0, 0, 0, 0, 8704, 0, 12288, 0, 6745, 6745, 0, 6737, 6737, 203, 0, 0, 0, 2561,
    3074, 6737, 6737, 85, 85, 85, 0, 1623, 6745, 6745, 6745, 6745, 6745, 0, 139, 0, 0, 90, 0, 82, 0, 0, 0, 0, 78, 79, 82, 90, 0, 0, 0, 143, 0, 0, 0, 0, 0, 223,
    0, 0, 0, 6745, 6745, 6745, 6745, 0, 211, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 6745, 6855, 0, 6737, 6858, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 6745, 0, 158, 6745,
    6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 170, 170, 2561, 3074, 3074, 6737, 85, 0, 6745, 6745, 6745, 0, 0, 0, 0, 0, 8296, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
    274, 0, 0, 2561, 8296, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0,
    0, 0, 0, 6745, 6737, 93, 0, 0, 0, 6854, 6745, 0, 6857, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 6737, 6745, 0, 0, 239, 8296, 8296, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 7168, 7168, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0, 83, 0, 0, 0, 0, 15360, 86, 0, 0, 0, 0, 14848, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14848,
    0, 6745, 0, 159, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 171, 171, 2561, 3074, 3074, 6737, 85, 0, 6745, 6745, 6745, 0, 0, 0, 0, 0, 8296, 187, 0, 197,
    159, 6745, 6745, 0, 6737, 6737, 0, 204, 0, 0, 2561, 3074, 6737, 6737, 85, 85, 85, 0, 1623, 6745, 6745, 6745, 6792, 6745, 0, 0, 0, 0, 154, 6745, 6745, 0,
    6737, 6737, 0, 0, 0, 0, 2767, 3280, 6737, 6865, 8296, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 3074, 6737, 85, 0, 6745, 6745, 6745, 0, 0, 0,
    0, 185, 8296, 0, 0, 8929, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 232, 0, 2794, 3307, 6745, 0, 0, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 172, 172,
    2561, 3074, 3074, 6737, 85, 0, 6745, 6745, 6745, 0, 182, 0, 0, 0, 8296, 0, 0, 6745, 0, 6737, 252, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8296, 0, 286, 0,
    0, 0, 0, 0, 0, 0, 6745, 6745, 6745, 6745, 0, 0, 0, 0, 0, 8296, 216, 0, 0, 0, 0, 0, 12288, 158, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737,
    6745, 0, 0, 0, 8489, 25088, 0, 0, 0, 141, 142, 0, 0, 0, 0, 0, 8296, 0, 146, 0, 0, 0, 0, 0, 0, 14336, 0, 14336, 14336, 14336, 0, 14336, 14336, 0, 14336,
    14336, 0, 14336, 6737, 6745, 0, 238, 0, 8296, 8296, 0, 0, 244, 0, 194, 0, 0, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 296,
    8296, 0, 0, 0, 0, 6745, 0, 160, 6745, 6745, 0, 166, 0, 6737, 6737, 6737, 0, 0, 0, 166, 2561, 3074, 3074, 6737, 85, 0, 6745, 6745, 6836, 0, 0, 183, 0, 0,
    8296, 0, 0, 8929, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2794, 3307, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 6745, 6737, 94, 0, 0, 0, 23040, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 10240, 0, 0, 2561, 6745, 0, 161, 6745, 6821, 0, 0, 0, 6737, 6737, 6824, 0, 0, 0, 0, 2561, 3074, 3074, 6737, 85, 0, 6745, 6835, 6745, 0,
    0, 0, 184, 0, 8296, 0, 0, 8929, 0, 226, 6745, 6745, 0, 6737, 6737, 230, 0, 0, 0, 2794, 3307, 6745, 6745, 6836, 6745, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0,
    157, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2767, 3280, 6737, 6865, 6737, 6745, 0, 0, 240, 8296, 8296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 6745, 6745, 0, 6737,
    6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 85, 85, 85, 0, 1623, 6745, 6745, 6745, 6745, 6793, 0, 0, 0, 140, 0, 6745, 6737, 1623, 6737, 6737, 0, 98, 6737,
    6737, 6737, 6737, 6737, 6737, 0, 6737, 85, 85, 85, 0, 1623, 0, 0, 6745, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 6745, 0, 0, 6820, 6745, 0,
    0, 0, 6737, 6823, 6737, 0, 0, 0, 0, 2561, 3074, 3587, 0, 5, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 196, 0, 0, 0, 0, 0, 0, 29184, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 12288, 0, 0, 0, 12288, 6745, 6745, 6745, 6745, 28672, 0, 0, 212, 0, 8296, 0, 0, 0, 0, 0, 0, 160, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561,
    3074, 6737, 6737, 0, 224, 0, 0, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 295, 0, 0, 8296, 0, 0, 0, 0, 6737, 6745, 30720, 0, 0,
    8296, 8296, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 150, 0, 0, 21504, 0, 0, 2561, 3074, 6737, 6745, 0,
    31744, 0, 8296, 0, 0, 0, 0, 151, 0, 194, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752, 10752, 0, 0, 2561, 0, 0, 20992, 0, 0, 0, 0,
    32256, 8296, 0, 0, 0, 0, 0, 0, 0, 161, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 0, 2048, 0, 0, 27648, 0, 0, 28160, 22528, 0, 0, 0, 0,
    0, 0, 0, 162, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 6748, 6737, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 2561, 3074, 6737, 6737, 85, 85, 85, 0, 1623, 0, 6745, 6745, 6745, 6745, 0, 0, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 0, 0, 6748, 6737, 1623, 6737, 6737, 96,
    0, 6737, 6737, 6737, 6737, 6737, 6737, 0, 6737, 78469, 134, 78469, 0, 1623, 0, 0, 6745, 0, 0, 0, 0, 18432, 0, 6737, 6773, 6779, 6737, 0, 0, 6737, 0, 6773,
    6737, 6773, 6737, 6737, 2561, 3074, 6737, 6745, 0, 0, 283, 8296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6745, 6745, 200, 6737, 6737, 0, 0, 0, 206, 2767, 3280, 6737,
    6865, 6745, 0, 162, 6745, 6745, 0, 0, 0, 6737, 6737, 6737, 0, 0, 0, 0, 2561, 0, 12288, 0, 6745, 6745, 0, 6737, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6737, 0,
    108, 108, 6737, 6737, 6737, 108, 6737, 6737, 108, 6745, 6737, 6737, 6745, 6737, 0, 107, 107, 6737, 6737, 6737, 107, 6737, 6737, 107, 6745, 6737, 6737, 6745,
    6737, 0, 106, 106, 6737, 6737, 6737, 106, 6737, 6737, 106, 6745, 6737, 6737, 6745, 6737, 6737, 0, 0, 6737, 0, 6745, 6737, 6745, 6737, 6737, 2689, 3203,
    6737, 0, 12288, 6745, 0, 6737, 0, 0, 0, 0, 2561, 3074, 6737, 6745, 0, 0, 0, 8489, 0, 0, 0, 222, 6745, 6745, 6745, 6745, 0, 0, 0, 0, 0, 8296, 0, 29696, 0, 0,
    0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2688, 3202, 0, 6831, 0, 1623, 0, 0, 0, 0, 0, 0, 33280, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 118, 0, 3704, 0, 0, 0, 3708,
    3709, 0, 0, 0, 189, 0, 0, 0, 0, 161, 0, 0, 0, 12288, 0, 0, 0, 293, 2561, 3074, 6737, 6745, 0, 0, 0, 8296, 0, 0, 0, 0, 0, 194, 0, 224, 0, 33280, 0, 0, 1623,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33792, 0, 0, 33894, 0, 0, 0, 33792, 33792, 0, 0, 33792, 0, 0, 33792, 33792, 0, 33792, 0, 0, 33792, 0, 33792, 33792,
    33792, 0, 33792, 0, 33792, 33792, 2561, 3074, 0, 0, 10752, 0, 10752, 10752, 0, 10752, 10752, 0, 10752, 0, 0, 2561, 3074, 0, 0, 10752, 85, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 19456, 0, 19456, 0, 0, 2561, 3074, 0, 34304, 1623, 0, 0, 0, 0, 0, 0, 0, 34304, 0, 0, 0, 0, 0, 34304
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    15, 31, 47, 63, 79, 124, 109, 140, 156, 172, 188, 92, 92, 92, 98, 204, 215, 219, 364, 229, 236, 238, 233, 242, 246, 253, 260, 256, 264, 268, 272, 275, 279,
    283, 287, 207, 292, 211, 364, 225, 454, 364, 299, 311, 295, 315, 319, 545, 209, 363, 372, 364, 348, 325, 330, 326, 335, 364, 288, 211, 364, 373, 347, 355,
    333, 337, 320, 362, 343, 347, 353, 302, 338, 359, 363, 345, 353, 349, 339, 361, 372, 347, 354, 364, 360, 371, 346, 369, 364, 457, 364, 387, 364, 364, 364,
    364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 365, 404, 422, 364, 364, 364, 428, 439, 364, 444, 486, 364, 448, 390, 249, 364, 364, 321,
    364, 543, 374, 379, 431, 365, 385, 394, 398, 401, 408, 418, 415, 412, 434, 439, 482, 486, 364, 364, 364, 468, 472, 338, 364, 435, 479, 485, 364, 390, 470,
    474, 381, 440, 493, 364, 389, 451, 475, 305, 491, 364, 364, 473, 364, 307, 504, 364, 499, 338, 306, 503, 487, 511, 222, 510, 508, 512, 460, 364, 364, 364,
    516, 364, 424, 364, 533, 375, 462, 464, 519, 495, 522, 535, 536, 526, 530, 540, 16, 32, 64, 4096, 4096, 16777216, 16777216, 12288, 12288, 12288, 12288,
    1048576, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 0, 393216, 0, 0, 1024, 2048, 0, 68, 1048640, 268435520, 0, 100663360,
    268435520, 64, 64, 64, 64, 12288, 536875008, 64, 12288, 100667392, 100663364, 100667456, 536875072, 100663360, 0, 0, 7936, 16128, 100667456, 101716032,
    100667456, 101716032, 4032, -2147483648, -2013265920, 100667456, 100667456, 4032, 536907840, 370151496, 675319872, 675319808, -2013265920, 370151496,
    675319872, -2013265856, 109539328, 675319808, 675319808, 109539392, 675319872, 109539392, 379015232, 675319872, 142377024, 142377024, 775983168, 410812480,
    110587968, 675319872, 110587968, 675319872, 775983168, 16, 32, 4096, 4096, 16777216, 1073741824, 4, 12288, 262144, 0, 262208, 8, 1048648, 4194304, 65536,
    8388608, 12288, 0, 0, 6291456, 536870912, 1073741824, 0, 8548352, 8536064, 8536064, 12288, 8540160, 4096, 4096, 1310784, 3932224, 0, 0, 16, 32, 0, 8536064,
    8388608, 8388608, 8388608, 12288, 8388608, 8388608, 8388608, 8388608, 12288, 12288, 0, 4096, 4096, 0, 0, 0, 16, 0, 32768, 32768, 0, 0, 8, 4194304, 4194304,
    65536, 0, 4194304, 4194304, 4194304, 4194304, 65536, 8388608, 0, 16, 32, 4096, 12288, 0, 0, 0, 0, -2147483648, 4194304, 4194304, 0, 0, 0, 32768, 0, 0, 0, 2,
    0, 142606336, 0, 0, 0, 134217728, 1616904192, 0, 0, 8, 0, 0, 0, 1048576, -2147483648, 4, 40, 136, 32832, 16402, 40, 32832, 386859008, 44, 16530, 16538,
    -2146435031, 24474, -2146435027, 386859008, 60, 16530, 386859008, 24730, 16538, 16538, 24730, 16538, -2146435067, -2146435071, 24730, 16538, -2146435071,
    32666, 32666, 0, 0, 1, 4, 0, 8388608, 134217728, 8, 16, 16, 0, 0, 8388608, 134217728, -2147483648, -2147483648, 6291456, 1610612736, 0, 0, 0, 983040,
    16777216, 100663296, 1048576, -2147483648, 0, 8192, 1048576, 256, 512, 256, 128, 32768, 0, 8, 4194304, 2048, 0, 0, 4, 4, 4, 4, 1048576, -2147483648, 8192,
    1048576, -2147483648, 256, 512, 3072, 4096, 0, 0, 6291456, 1610612736, 0, 458752, 524288, 16777216, 33554432, 268435456, 0, 0, 0, 256, 1073741824, 0,
    458752, 268435456, 0, 0, 4, 2, 0, 256, 512, 2048, 0, 65536, 393216, 0, 0, 4194304, 262144, 0, 2048, 4096, 2097152, 4194304, 2048, 1, 2, 4, 0, 2, 4, 2, 1, 4,
    3, 0, 6, 1, 3, 6, 3, 4, 2, 4, 1, 0, 2, 6, 0, 4, 6, 6, 0, 4, 16, 32, 32, 4096
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'BARE_URL_CHARS',
    'important',
    'STRING_CONTENT1',
    'STRING_CONTENT2',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'&quot;&quot;'&quot;,
    &quot;''''&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@media print'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'@page'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'amzn-mobi7'&quot;,
    &quot;'and'&quot;,
    &quot;'attr('&quot;,
    &quot;'bottom-left'&quot;,
    &quot;'bottom-right'&quot;,
    &quot;'left'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'right'&quot;,
    &quot;'screen'&quot;,
    &quot;'top-left'&quot;,
    &quot;'top-right'&quot;,
    &quot;'url('&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="$end - $result idiv 128"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 128 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 32"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 32 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 16"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 2">
        <xsl:variable name="i0" select=". * 313 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:variable name="i2" select="$i1 idiv 16"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 16 + $p:EXPECTED[$i2 + 1] + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse arearule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-arearule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'bottom-left' -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- 'bottom-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'bottom-right' -->
          <xsl:variable name="state" select="p:consume(54, $input, $state)"/>       <!-- 'bottom-right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 61">                                        <!-- 'top-left' -->
          <xsl:variable name="state" select="p:consume(61, $input, $state)"/>       <!-- 'top-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(62, $input, $state)"/>       <!-- 'top-right' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'arearule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (774,                               (: S S :)
                                                   8454)">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 205062                                   (: S '}' IDENT :)
                        and $state[$p:lk] != 418054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 434438                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 574214">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 15)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 574214">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-areaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8485">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 106789                                    (: ';' '}' S :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 581925                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 1082149                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089829">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 17)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 18)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 19)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 18)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 19)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-areaquery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8485">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 106789                                    (: ';' '}' S :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 581925                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 1082149                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089829">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 17)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 18)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 19)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 17, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-areaquery-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 18)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 19)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-areaquery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production areaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-areaquery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(40, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3107">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494627">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 16)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-areaquery-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-areaquery-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 8454">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 66                               (: '}' :)
                                and $state[$p:lk] != 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 20)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4486">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-areaquery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-areaquery-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8454">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(31, $input, $state)"/> <!-- S | '/*' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 66                                     (: '}' :)
                          and $state[$p:lk] != 4486">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 20)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4486">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-areaquery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-areaquery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse areaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-arearule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-areaquery-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'areaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pagearea.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagearea" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>          <!-- 'left' | 'right' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 55">                                        <!-- 'left' -->
          <xsl:variable name="state" select="p:consume(55, $input, $state)"/>       <!-- 'left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(59, $input, $state)"/>       <!-- 'right' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagearea', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pagerule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagerule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '@page' -->
    <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>          <!-- S | ':' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 6">                                        <!-- S -->
          <xsl:variable name="state" select="p:lookahead2(32, $input, $state)"/>    <!-- S | ':' | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 8198">                               <!-- S '{' -->
                <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 36                                           (: ':' :)
                    and $state[$p:lk] != 64                                           (: '{' :)
                    and $state[$p:lk] != 774                                          (: S S :)
                    and $state[$p:lk] != 4614">                                     <!-- S ':' -->
          <xsl:variable name="state" select="p:memoized($state, 22)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>   <!-- S -->
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 774                                           (: S S :)
                     or $state[$p:lk] = 4614">                                      <!-- S ':' -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>          <!-- S | ':' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pagearea($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagerule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8454">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(70, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '"' | "'" | '(' | '*' | '.' | '/*' |
                                                                                                ':' | '@' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 39                                       (: '@' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 4998                                     (: S '@' :)
                        and $state[$p:lk] != 418054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 434438                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 574214                                   (: S S '/*' :)
                        and $state[$p:lk] != 639750">                               <!-- S S '@' -->
              <xsl:variable name="state" select="p:memoized($state, 9)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 4998                                       (: S '@' :)
                      and $state[$p:lk] != 574214                                     (: S S '/*' :)
                      and $state[$p:lk] != 639750">                                 <!-- S S '@' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pagequery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-pagequery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8485">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 106789                                    (: ';' '}' S :)
                         or $state[$p:lk] = 205093                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 254245                                    (: ';' '}' HASH :)
                         or $state[$p:lk] = 368933                                    (: ';' '}' NOT :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 450853                                    (: ';' '}' '(' :)
                         or $state[$p:lk] = 483621                                    (: ';' '}' '*' :)
                         or $state[$p:lk] = 549157                                    (: ';' '}' '.' :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 581925                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 598309                                    (: ';' '}' ':' :)
                         or $state[$p:lk] = 647461                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 745765                                    (: ';' '}' '@page' :)
                         or $state[$p:lk] = 762149                                    (: ';' '}' '[' :)
                         or $state[$p:lk] = 1073445                                   (: ';' '}' '|' :)
                         or $state[$p:lk] = 1082149                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089829">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 11)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                          ':' | '@' | '@page' | '[' | '|' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 12)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 13)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                    '@' | '@page' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 12)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 13)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-pagequery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pagequery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8485">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 106789                                    (: ';' '}' S :)
                         or $state[$p:lk] = 205093                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 254245                                    (: ';' '}' HASH :)
                         or $state[$p:lk] = 368933                                    (: ';' '}' NOT :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 450853                                    (: ';' '}' '(' :)
                         or $state[$p:lk] = 483621                                    (: ';' '}' '*' :)
                         or $state[$p:lk] = 549157                                    (: ';' '}' '.' :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 581925                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 598309                                    (: ';' '}' ':' :)
                         or $state[$p:lk] = 647461                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 745765                                    (: ';' '}' '@page' :)
                         or $state[$p:lk] = 762149                                    (: ';' '}' '[' :)
                         or $state[$p:lk] = 1073445                                   (: ';' '}' '|' :)
                         or $state[$p:lk] = 1082149                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089829">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 11)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                          ':' | '@' | '@page' | '[' | '|' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 12)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 13)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 11, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-pagequery-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                    '@' | '@page' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 12)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 13)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-pagequery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production pagequery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-pagequery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(40, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3107">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494627">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 10)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-pagequery-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-pagequery-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 8454">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                        '@' | '@page' | '[' | '|' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 66                               (: '}' :)
                                and $state[$p:lk] != 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 14)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4486">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 10, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 10, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-pagequery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-pagequery-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8454">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                                  '@page' | '[' | '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 66                                     (: '}' :)
                          and $state[$p:lk] != 4486">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 14)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4486">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-pagequery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-pagequery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse pagequery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-pagerule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-pagequery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- '@' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-areaquery($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-pagequery-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-pagequery-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-pagequery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagequery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse printcssrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- '@media print' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'printcssrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production printcssquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(63, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 35">                                   <!-- '/*' -->
              <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/> <!-- CommentContents -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 3107">                           <!-- '/*' CommentContents -->
                    <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 494627">                                <!-- '/*' CommentContents '*/' -->
              <xsl:variable name="state" select="p:memoized($state, 7)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-COMMENT($input, $state)
                  "/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-printcssquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production printcssquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(67, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                          '@page' | '[' | '|' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1926">                           <!-- S HASH -->
                    <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                '/*' | ':' | '@' | '[' | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2822">                           <!-- S NOT -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3462">                           <!-- S '(' -->
                    <xsl:variable name="state" select="p:lookahead3(34, $input, $state)"/> <!-- IDENT | '"' | "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4486">                           <!-- S '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4614">                           <!-- S ':' -->
                    <xsl:variable name="state" select="p:lookahead3(33, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 5766">                           <!-- S '@page' -->
                    <xsl:variable name="state" select="p:lookahead3(32, $input, $state)"/> <!-- S | ':' | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 5894">                           <!-- S '[' -->
                    <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8326">                           <!-- S '|' -->
                    <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8454">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(73, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1542,                              (: S IDENT :)
                                                   3718)">                          <!-- S '*' -->
                    <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (4230,                              (: S '.' :)
                                                   4998)">                          <!-- S '@' -->
                    <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 15                                       (: HASH :)
                        and $state[$p:lk] != 22                                       (: NOT :)
                        and $state[$p:lk] != 27                                       (: '(' :)
                        and $state[$p:lk] != 29                                       (: '*' :)
                        and $state[$p:lk] != 33                                       (: '.' :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 36                                       (: ':' :)
                        and $state[$p:lk] != 39                                       (: '@' :)
                        and $state[$p:lk] != 45                                       (: '@page' :)
                        and $state[$p:lk] != 46                                       (: '[' :)
                        and $state[$p:lk] != 65                                       (: '|' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 99078                                    (: S S S :)
                        and $state[$p:lk] != 1082118">                              <!-- S S '}' -->
              <xsl:variable name="state" select="p:memoized($state, 8)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 99078                                      (: S S S :)
                      and $state[$p:lk] != 1082118">                                <!-- S S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-printcssquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production printcssquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-printcssquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(67, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(67, $input, $state)"/>  <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(63, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                            '@page' | '[' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 1926">                         <!-- S HASH -->
                      <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                  '/*' | ':' | '@' | '[' | '{' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 2822">                         <!-- S NOT -->
                      <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3462">                         <!-- S '(' -->
                      <xsl:variable name="state" select="p:lookahead3(34, $input, $state)"/> <!-- IDENT | '"' | "'" -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4614">                         <!-- S ':' -->
                      <xsl:variable name="state" select="p:lookahead3(33, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 5766">                         <!-- S '@page' -->
                      <xsl:variable name="state" select="p:lookahead3(32, $input, $state)"/> <!-- S | ':' | '{' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 5894">                         <!-- S '[' -->
                      <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | IDENT | '*' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8326">                         <!-- S '|' -->
                      <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = (1542,                            (: S IDENT :)
                                                     3718)">                        <!-- S '*' -->
                      <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                  '/*' | ':' | '@' | '[' | '{' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = (4230,                            (: S '.' :)
                                                     4998)">                        <!-- S '@' -->
                      <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- IDENT -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 15                                     (: HASH :)
                          and $state[$p:lk] != 22                                     (: NOT :)
                          and $state[$p:lk] != 27                                     (: '(' :)
                          and $state[$p:lk] != 29                                     (: '*' :)
                          and $state[$p:lk] != 33                                     (: '.' :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 36                                     (: ':' :)
                          and $state[$p:lk] != 39                                     (: '@' :)
                          and $state[$p:lk] != 45                                     (: '@page' :)
                          and $state[$p:lk] != 46                                     (: '[' :)
                          and $state[$p:lk] != 65                                     (: '|' :)
                          and $state[$p:lk] != 774">                                <!-- S S -->
                <xsl:variable name="state" select="p:memoized($state, 6)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 774">                                 <!-- S S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-printcssquery-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(60, $input, $state)"/>    <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 45">                                  <!-- '@page' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-pagequery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-query_declaration($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-printcssquery-3($input, $state)"/>
          <xsl:sequence select="p:parse-printcssquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse printcssquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-printcssrule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-printcssquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'printcssquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>          <!-- ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                         'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 51">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(51, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 60">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(60, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(58, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(57, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(56, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'amzn-mobi7' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'amzn-mobi7' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                         'not' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                          'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 64                                          (: '{' :)
                       or $state[$p:lk] = 8198">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                              'not' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 27                                    (: '(' :)
                             or $state[$p:lk] = 3462">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(6, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(54, $input, $state)"/>      <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(64, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(61, $input, $state)"/>  <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' |
                                                                                         '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production import (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | '"' | "'" | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-import-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production import (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-import-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse import.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '@import' -->
    <xsl:variable name="state" select="p:parse-import-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-import-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'import', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>      <!-- S | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_atrule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-simple_atrule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QUOTED_STRING($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-simple_atrule-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '*/' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'COMMENT', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>            <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consumeT(24, $input, $state)"/>            <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/>            <!-- '*/' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'attr(' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'attr(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ATTR($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'attr(' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'attr(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ATTR($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>      <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>      <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>      <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>      <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | '/' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | '/' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>        <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(74, $input, $state)"/>  <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | '-' | '/' | '/*' | ';' | 'attr(' | 'url(' |
                                                                                         '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(43, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/' | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] eq 1542">                             <!-- S IDENT -->
                  <xsl:variable name="state" select="p:lookahead3(56, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                              ':' | ';' | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] eq 3206">                             <!-- S '"' -->
                  <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] eq 3334">                             <!-- S "'" -->
                  <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 68742                                       (: S '&quot;' STRING_CONTENT1 :)
                       or $state[$p:lk] = 85254                                       (: S &quot;'&quot; STRING_CONTENT2 :)
                       or $state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 99846">                                   <!-- S IDENT S -->
            <xsl:variable name="state" select="p:memoized($state, 23)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                  DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = 34                                (: '/' :)
                                 or $state[$p:lk] = 774                               (: S S :)
                                 or $state[$p:lk] = 4358">                          <!-- S '/' -->
                      <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
                      <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                      <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-value($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-value($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 3                                             (: important :)
                     or $state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 20                                            (: COMMA :)
                     or $state[$p:lk] = 25                                            (: '&quot;' :)
                     or $state[$p:lk] = 26                                            (: &quot;'&quot; :)
                     or $state[$p:lk] = 28                                            (: ')' :)
                     or $state[$p:lk] = 35                                            (: '/*' :)
                     or $state[$p:lk] = 37                                            (: ';' :)
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 2566                                          (: S COMMA :)
                     or $state[$p:lk] = 4486                                          (: S '/*' :)
                     or $state[$p:lk] = 4742                                          (: S ';' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 197382                                        (: S S IDENT :)
                     or $state[$p:lk] = 328454                                        (: S S COMMA :)
                     or $state[$p:lk] = 410374                                        (: S S '&quot;' :)
                     or $state[$p:lk] = 426758                                        (: S S &quot;'&quot; :)
                     or $state[$p:lk] = 591366                                        (: S IDENT ':' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                            DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 34                                      (: '/' :)
                           or $state[$p:lk] = 774                                     (: S S :)
                           or $state[$p:lk] = 4358">                                <!-- S '/' -->
                <xsl:variable name="state" select="p:parse-values-2($input, $state)"/>
                <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '/' -->
                <xsl:variable name="state" select="p:parse-values-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-value($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-value($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-values-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(74, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/' | '/*' | ';' | 'attr(' | 'url(' |
                                                                                          '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(43, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(56, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99078                                     (: S S S :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 23)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = 34                              (: '/' :)
                                   or $state[$p:lk] = 774                             (: S S :)
                                   or $state[$p:lk] = 4358">                        <!-- S '/' -->
                        <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 23, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 66                                          (: '}' :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 8454                                        (: S '}' :)
                       or $state[$p:lk] = 197382                                      (: S S IDENT :)
                       or $state[$p:lk] = 328454                                      (: S S COMMA :)
                       or $state[$p:lk] = 410374                                      (: S S '&quot;' :)
                       or $state[$p:lk] = 426758                                      (: S S &quot;'&quot; :)
                       or $state[$p:lk] = 591366                                      (: S IDENT ':' :)
                       or $state[$p:lk] = 1082118">                                 <!-- S S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                              DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 34                                    (: '/' :)
                             or $state[$p:lk] = 774                                   (: S S :)
                             or $state[$p:lk] = 4358">                              <!-- S '/' -->
                  <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 6th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 7th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-7">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(72, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'attr(' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(56, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 25)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 66                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 8454                                        (: S '}' :)
                       or $state[$p:lk] = 591366">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-7($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 7th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-7">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(72, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'attr(' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(56, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 25)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 25, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-7($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 66                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 8454                                        (: S '}' :)
                       or $state[$p:lk] = 591366">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-7($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 4th loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-4">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/>  <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(41, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078">                                   <!-- S S S -->
            <xsl:variable name="state" select="p:memoized($state, 24)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                <xsl:variable name="state" select="p:try-values-6($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-value($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-values-7($input, $state)"/>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] != -1
                    and $state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 2566                                         (: S COMMA :)
                    and $state[$p:lk] != 328454">                                   <!-- S S COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-values-5($input, $state)"/>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-values-6($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-values-7($input, $state)"/>
          <xsl:sequence select="p:parse-values-4($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(41, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99078">                                 <!-- S S S -->
              <xsl:variable name="state" select="p:memoized($state, 24)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                  <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                  <xsl:variable name="state" select="p:try-values-6($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:try-values-7($input, $state)"/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 24, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 20                                         (: COMMA :)
                      and $state[$p:lk] != 2566                                       (: S COMMA :)
                      and $state[$p:lk] != 328454">                                 <!-- S S COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
            <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>    <!-- COMMA -->
            <xsl:variable name="state" select="p:try-values-6($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-value($input, $state)
            "/>
            <xsl:variable name="state" select="p:try-values-7($input, $state)"/>
            <xsl:sequence select="p:try-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-values-4($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consumeT(3, $input, $state)"/>       <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(56, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 537">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 666">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 410137                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 426650">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 21)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4620">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consume(36, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(56, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 537">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 666">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 410137                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 426650">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 21)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 21, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4620">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>    <!-- ':' -->
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:try-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-values($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 65">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (12,                                          (: IDENT :)
                                         29)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(30, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (8332,                                  (: IDENT '|' :)
                                               8349)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 780                                           (: IDENT S :)
                     or $state[$p:lk] = 1601                                          (: '|' IDENT :)
                     or $state[$p:lk] = 3596                                          (: IDENT ')' :)
                     or $state[$p:lk] = 204940                                        (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 204957">                                    <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 15">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 33">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 46">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ATTR.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ATTR" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- 'attr(' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ATTR', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ATTR.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ATTR" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(52, $input, $state)"/>            <!-- 'attr(' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- BARE_URL_CHARS -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'BARE_URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>             <!-- BARE_URL_CHARS -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(63, $input, $state)"/>             <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(63, $input, $state)"/>            <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:try-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:try-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 18">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 63">                                      <!-- 'url(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-URL($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 52">                                      <!-- 'attr(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ATTR($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 32">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(32, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 14">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(14, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 12">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(12, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 20">                                      <!-- COMMA -->
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-QUOTED_STRING($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 18">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>  <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>  <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 63">                                    <!-- 'url(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-URL($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 52">                                    <!-- 'attr(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-ATTR($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>  <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 32">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>  <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 23">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>  <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>  <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 12">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>  <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 20">                                    <!-- COMMA -->
              <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>  <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-QUOTED_STRING($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:try-expression-2($input, $state)"/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 28">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-expression-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 28">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-expression($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- FUNCTION -->
    <xsl:variable name="state" select="p:try-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 28">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-expression($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QUOTED_STRING', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(49, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 65                                            (: '|' :)
                     or $state[$p:lk] = 8332">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 47">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 11">                                  <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 38">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(38, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-QUOTED_STRING($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(47, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 29">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(71, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 65                                            (: '|' :)
                     or $state[$p:lk] = 8349">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- '*' -->
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 65">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(65, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(71, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 65                                            (: '|' :)
                     or $state[$p:lk] = 8332">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 33                                         (: '.' :)
                      and $state[$p:l1] != 36                                         (: ':' :)
                      and $state[$p:l1] != 39                                         (: '@' :)
                      and $state[$p:l1] != 46">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 15">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(15, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 46">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 36">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 39">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 46">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 36">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 39">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 33                                         (: '.' :)
                      and $state[$p:l1] != 36                                         (: ':' :)
                      and $state[$p:l1] != 39                                         (: '@' :)
                      and $state[$p:l1] != 46">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 29                                            (: '*' :)
                     or $state[$p:l1] = 65">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 65">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (12,                                    (: IDENT :)
                                               29)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(69, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                            ':' | '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (8332,                            (: IDENT '|' :)
                                                     8349)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 780                                     (: IDENT S :)
                           or $state[$p:lk] = 1601                                    (: '|' IDENT :)
                           or $state[$p:lk] = 1932                                    (: IDENT HASH :)
                           or $state[$p:lk] = 2316                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 2444                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 2572                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 2700                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 2828                                    (: IDENT NOT :)
                           or $state[$p:lk] = 3468                                    (: IDENT '(' :)
                           or $state[$p:lk] = 4236                                    (: IDENT '.' :)
                           or $state[$p:lk] = 4492                                    (: IDENT '/*' :)
                           or $state[$p:lk] = 4620                                    (: IDENT ':' :)
                           or $state[$p:lk] = 5004                                    (: IDENT '@' :)
                           or $state[$p:lk] = 5900                                    (: IDENT '[' :)
                           or $state[$p:lk] = 8204                                    (: IDENT '{' :)
                           or $state[$p:lk] = 204940                                  (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 204957">                              <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(57, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 64                                          (: '{' :)
                       or $state[$p:lk] = 8198">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 35">                                       <!-- '/*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8454">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(76, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '"' | "'" | '(' | '*' | '.' |
                                                                                                '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                '@media print' | '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 418054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 434438                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 574214">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 574214">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8485">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 774                                      (: S S :)
                        and $state[$p:lk] != 1542                                     (: S IDENT :)
                        and $state[$p:lk] != 1573                                     (: ';' IDENT :)
                        and $state[$p:lk] != 3206                                     (: S '&quot;' :)
                        and $state[$p:lk] != 3237                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 3334                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 3365                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 4742                                     (: S ';' :)
                        and $state[$p:lk] != 4773                                     (: ';' ';' :)
                        and $state[$p:lk] != 8454                                     (: S '}' :)
                        and $state[$p:lk] != 197413                                   (: ';' S IDENT :)
                        and $state[$p:lk] != 410405                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 426789                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 607013">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 2)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 3)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                    '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 3)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8485">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 774                                      (: S S :)
                        and $state[$p:lk] != 1542                                     (: S IDENT :)
                        and $state[$p:lk] != 1573                                     (: ';' IDENT :)
                        and $state[$p:lk] != 3206                                     (: S '&quot;' :)
                        and $state[$p:lk] != 3237                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 3334                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 3365                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 4742                                     (: S ';' :)
                        and $state[$p:lk] != 4773                                     (: ';' ';' :)
                        and $state[$p:lk] != 8454                                     (: S '}' :)
                        and $state[$p:lk] != 197413                                   (: ';' S IDENT :)
                        and $state[$p:lk] != 410405                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 426789                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 607013">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 2)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 3)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 2, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                    '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 3)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(62, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(40, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3107">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494627">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 1)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-rule-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-rule-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 8454">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                        ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                        '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                        '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 66                               (: '}' :)
                                and $state[$p:lk] != 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 5)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4486">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(40, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8454">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(75, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                  '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                  '@namespace' | '@page' | '[' | '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 66                                     (: '}' :)
                          and $state[$p:lk] != 4486">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 5)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4486">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(73, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@media print' | '@namespace' |
                                                                                         '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(73, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@media print' | '@namespace' |
                                                                                         '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40                                      (: '@charset' :)
                           or $state[$p:l1] = 44">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 41">                                  <!-- '@import' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-import($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 42">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 43">                                  <!-- '@media print' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-printcssquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
          <xsl:sequence select="p:parse-css-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 16384 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   ! Memoize the backtracking result that was computed at decision point
   ! $dpi for input position $e0. Reconstruct state from the parameters.
   !
   ! @param $state the lexer state to be restored.
   ! @param $update the lexer state containing updates.
   ! @param $dpi the decision point id.
   ! @param $e0 the input position.
   ! @param $v the id of the successful alternative.
   ! @param $lk the new lookahead code.
   ! @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 32 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 32 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:choose>
          <xsl:when test="empty($result/self::ERROR)">
            <xsl:sequence select="$result"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>