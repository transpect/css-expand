<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Sun Apr 16, 2023 08:53 (UTC+02) by REx v5.56 which is Copyright (c) 1979-2023 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -ll 3 -backtrack -xslt -main -tree -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 21, 21, 22, 23, 24, 25, 26, 21, 27, 28, 10, 29, 30, 10, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 35, 36, 37, 38, 33, 10, 39, 40, 41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
    66, 10
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 90, 122, 185, 153, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
    216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 21, 27, 28, 10, 29, 30, 10, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33, 33, 33, 33, 33, 35, 36, 37, 38, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 33, 33
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    2561, 3074, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1101, 78,
    79, 1104, 1105
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 2176, 2198, 2237, 2271, 2323, 2338, 3132, 4893, 2363, 3132, 3132, 2450, 6849, 2424, 2401, 4412, 2422, 2440, 4396, 6850,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2486, 2198, 2237, 2271, 2323, 2252, 3132, 4893, 2507, 3132, 3132, 5106, 6849, 2424,
    2536, 6841, 2422, 5859, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2176, 2198, 2237, 2271, 2323, 2557, 3132, 4893,
    2595, 3132, 3132, 5249, 2692, 2657, 2633, 2684, 2655, 2673, 2689, 2693, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2709, 2198,
    2237, 2271, 2323, 2731, 3132, 4893, 2363, 2464, 3132, 5106, 6849, 2424, 2536, 6841, 2422, 6002, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 2773, 5263, 5258, 2780, 3132, 2796, 3132, 4003, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2835, 3132, 2860, 2872, 3373, 2888, 3132, 3132, 2385, 2464, 3132, 4831, 3132, 2844, 3132, 4832,
    2842, 2979, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3500, 2928, 2943, 3132, 3132, 2210, 2464,
    3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3782,
    3132, 2796, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 2773, 5263, 5258, 3132, 3132, 2796, 3132, 4435, 2210, 2464, 2977, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132, 3132, 2796, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2995, 3132, 3021, 3033, 3755, 3049, 3132, 3132, 6877, 2464, 3132, 4331,
    3132, 3005, 3132, 4332, 3003, 6922, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3091, 3132, 3132, 3312, 3132, 3116,
    3131, 2639, 3274, 2464, 2638, 4974, 6694, 4986, 4697, 4990, 4520, 3151, 3148, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3167, 4158, 3193, 3132, 4164, 3213, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3262, 3290, 3100, 5549, 3328, 3343, 3897, 3132, 4063, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132, 3358, 2796, 3132, 3901, 3404, 2464, 3132, 4727, 3132, 2912,
    3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3431, 3454, 3477, 3516, 3534, 2796, 3132, 3526,
    3489, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3550, 3573,
    3177, 3615, 3628, 3644, 2458, 6097, 5940, 2464, 2491, 4100, 3662, 4773, 3678, 6841, 2617, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 2773, 5263, 5258, 4920, 3725, 3740, 3132, 2347, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3806, 3829, 4360, 3852, 3867, 3882, 3132, 3132, 4051, 2464, 3132, 4727, 3132, 2912, 3132, 4728,
    2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132, 5661, 3917, 2458, 2221, 6416, 3836,
    3951, 5511, 2286, 5445, 3989, 4023, 4039, 4090, 7009, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132,
    5661, 3917, 2458, 2221, 6416, 3557, 3951, 5511, 6676, 5445, 4116, 4146, 4908, 4180, 6963, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 2773, 5263, 5258, 3132, 5661, 3917, 2458, 2221, 6416, 6970, 3951, 5511, 6783, 5445, 4206, 4247, 4263, 4291, 2376, 6850, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132, 5661, 3917, 2458, 2221, 6416, 3557, 3951, 5511, 6676, 5445, 4317, 4146, 4348, 4376,
    5966, 4428, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132, 5661, 3917, 2458, 2221, 6416, 6970, 3951, 5511,
    6783, 5445, 4206, 4247, 4908, 4291, 2376, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 3132, 5661, 3917,
    2458, 2221, 6416, 3557, 3951, 5511, 6676, 5445, 4317, 4146, 4348, 4376, 5966, 4451, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    2773, 5263, 5258, 3132, 5661, 3917, 2458, 2221, 6416, 3557, 3951, 5511, 6676, 5445, 4116, 4146, 4908, 4180, 2902, 6850, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 4477, 4500, 4512, 4484, 4536, 4551, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4596, 4623, 5258, 4607, 3197, 2796, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912,
    3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 2609, 3132, 2796, 2182, 3132,
    2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263,
    5258, 3132, 6888, 2796, 3132, 2255, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 2773, 5263, 5258, 4566, 4580, 4648, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4744, 2458, 5602, 6416, 3557, 4760, 5511, 6676, 5445, 4116, 4146,
    4908, 4180, 6963, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 2464,
    2491, 5869, 3662, 3964, 3678, 6841, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206,
    5219, 4789, 2458, 5796, 5940, 2464, 4805, 5869, 3662, 3964, 3678, 6841, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 2773, 5263, 5258, 4275, 4848, 4863, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4936, 4960, 5455, 5006, 5019, 5035, 5076, 5362, 5051, 2307, 2406, 3692, 4130, 5067, 5092, 4878, 5135, 5130,
    3702, 3706, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5151, 5258, 3304, 3132, 2796, 3132, 3132, 2210, 2464, 3132, 4727,
    3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 5824, 3132, 2796,
    3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    5177, 5235, 5321, 5282, 5295, 4744, 2458, 5602, 6416, 3813, 4760, 6953, 6724, 5311, 4116, 4146, 3770, 4180, 2520, 6850, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 4461, 5206, 5219, 4744, 2458, 5602, 6416, 3557, 4760, 5511, 6676, 5445, 4116, 4146, 4908, 4180, 2810, 6850,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4744, 5114, 6327, 6272, 3557, 5337, 5511, 6676, 5445,
    4116, 4146, 4908, 4180, 6963, 5378, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4744, 2458, 6527,
    6458, 3557, 5403, 5511, 6676, 6195, 4116, 4146, 4908, 4180, 6963, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713,
    5976, 5206, 5219, 4744, 2301, 4673, 6416, 3557, 5432, 5471, 7073, 5631, 5497, 5537, 4908, 5565, 5481, 3246, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4744, 2458, 6135, 6416, 5592, 5618, 5511, 6676, 5445, 5647, 4146, 3388, 4180, 6963, 5677, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 5702, 2491, 5869, 5708, 3964, 3678, 6841,
    6242, 2574, 6846, 5787, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 2464,
    5724, 4190, 3662, 3964, 3678, 6841, 2579, 2574, 2957, 2961, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206,
    5219, 4789, 3063, 5192, 6557, 2566, 5740, 5869, 2470, 3964, 3678, 5778, 2579, 2574, 5879, 5812, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 2464, 2491, 5869, 3662, 3964, 3678, 5849, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 5895, 5976, 5206, 5219, 4789, 3973, 4632, 6301, 6489, 2541, 5869, 3662, 4818, 3678, 6841, 2579, 2574,
    3659, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 5762, 2819, 5911, 3461, 5927, 5956,
    3662, 5753, 3678, 5992, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 6048, 5219, 6018,
    2458, 6034, 6077, 3438, 3415, 5869, 6093, 3964, 3678, 6113, 2579, 2574, 6846, 6151, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    4689, 4713, 5976, 6181, 5219, 4789, 2745, 6167, 5940, 3069, 2491, 5869, 3075, 5350, 6221, 5576, 2579, 6237, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 6258, 5219, 4789, 2458, 4231, 6753, 3239, 6288, 5869, 6371, 6317, 3678, 6841, 2579, 7027, 5521, 6850,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 6343, 5976, 5206, 5219, 4789, 6359, 5387, 6387, 3790, 6403, 4386, 3935, 6432,
    6474, 6646, 6835, 2574, 3932, 6517, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 6543, 5219, 4789, 2458, 5796,
    5940, 2464, 4805, 5869, 3662, 3964, 3678, 6841, 6998, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713,
    5161, 5206, 5219, 6573, 2458, 5833, 6589, 4220, 4944, 4301, 2757, 5416, 6605, 6841, 4406, 6635, 3227, 6662, 6692, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 4689, 6710, 6205, 5206, 6061, 4789, 2458, 4632, 5940, 2464, 2491, 5869, 3662, 3964, 3678, 6841, 2579, 2574, 6846, 6850, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 5686, 5940, 2464, 6740, 5869, 3662, 3964, 3678, 6841,
    2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 2464,
    2715, 5869, 3662, 3964, 3678, 6841, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206,
    5219, 4789, 2458, 4632, 5940, 2464, 6445, 5869, 3662, 3964, 6769, 6841, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 2464, 2491, 5869, 6619, 3964, 3678, 6841, 2579, 2574, 6846, 6850, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 4689, 4713, 5976, 5206, 5219, 4789, 2458, 4632, 5940, 7019, 2491, 5869, 3662, 3964, 3678, 6841, 2579, 2574,
    6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 6799, 6824, 6866, 3709, 6808, 2796, 3132, 3132, 2210, 2464, 3132, 4727,
    3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2773, 6919, 4663, 6501, 6904, 6938,
    3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    2773, 6986, 3587, 3599, 7043, 7058, 3132, 3132, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 2773, 5263, 5258, 6125, 4074, 2796, 3132, 5266, 2210, 2464, 3132, 4727, 3132, 2912, 3132, 4728, 2910, 4007, 3132, 3132,
    3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 2709, 2198, 2237, 2271, 2323, 2731, 3132, 4893, 2363, 2464, 3132, 5106, 6849, 2424,
    2536, 6841, 2422, 5859, 6846, 6850, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 0, 0, 3587, 0, 5, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 5632, 6144, 5120, 4608, 4096, 0, 0, 0, 3587, 3587, 3605, 3587, 3587, 3587, 3587, 3587, 3587, 3587, 0, 0, 0, 0, 0, 2561, 2561, 3074, 3074, 0, 89, 0, 0, 0,
    0, 0, 0, 8865, 7802, 7842, 7802, 6750, 6750, 0, 0, 0, 7802, 3605, 3587, 3587, 3587, 3587, 3587, 0, 3587, 3587, 3587, 3605, 3587, 0, 3587, 3605, 3587, 2561,
    3074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10240, 0, 0, 3605, 3587, 3587, 3587, 3587, 3605, 3587, 0, 3700, 3587, 3587, 0, 3700, 3587, 0, 0, 0, 8418, 0,
    0, 228, 0, 230, 0, 0, 8939, 0, 0, 6750, 6750, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 201, 0, 0, 3587, 3587, 125, 3710, 3587, 3711,
    3710, 3715, 3711, 3587, 3711, 3587, 3715, 3715, 3587, 2561, 3074, 0, 0, 0, 89, 89, 89, 0, 0, 0, 0, 0, 0, 0, 121, 0, 121, 0, 0, 0, 0, 0, 121, 0, 0, 3715, 0,
    0, 2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 0, 0, 0, 0, 0, 8499, 0, 231, 0, 0, 0, 0, 0, 0, 0, 3074, 3074, 0, 89, 0, 0, 0, 0, 0, 8304, 8304, 0, 0, 159,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 95, 86, 86, 0, 202, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 202, 0, 233, 0, 0,
    0, 0, 0, 2561, 3074, 6741, 6741, 6750, 6750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 167, 6750, 6750, 0, 0, 3587, 0,
    5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 3715, 0, 0, 0, 2561, 0, 3074, 6741, 0, 0, 0, 6750, 0, 0, 0, 0, 0, 8499, 308, 0, 0, 0,
    0, 0, 311, 0, 0, 0, 8304, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6864, 6741, 6866, 0, 3587, 2694, 3208, 0, 0, 0, 89, 89, 89, 0, 0, 0, 0, 0, 0, 0,
    194, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 0, 3715, 0, 0, 0, 2694, 0, 3208, 6838, 89, 0, 0, 6840, 0, 0, 0, 0,
    19456, 0, 0, 19456, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 290, 0, 0, 0, 0, 8417, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7168, 7168, 0, 0, 0,
    0, 278, 0, 0, 0, 0, 0, 0, 0, 2694, 3208, 6838, 6840, 0, 0, 0, 0, 0, 0, 0, 8417, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 2694, 3208, 6838, 6840, 0, 0, 0, 0, 0,
    8417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 3587, 0, 5, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 6750, 6750, 6741, 6741, 0, 3587, 2561, 3074,
    0, 0, 6741, 89, 89, 89, 0, 0, 0, 0, 0, 6750, 0, 0, 0, 0, 148, 149, 0, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 6750, 6750, 2561, 3074, 0,
    0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 115, 0, 0, 0, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 0, 0, 306, 8499, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 6750, 0, 168, 6750, 6750, 0, 0, 0, 6741, 0, 3074, 0, 0, 0, 89, 13312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    13312, 0, 0, 0, 0, 0, 13312, 13312, 0, 0, 13312, 0, 13312, 13312, 13312, 0, 0, 13312, 0, 0, 13312, 0, 0, 0, 13312, 0, 0, 13312, 2561, 3074, 0, 0, 6741, 89,
    89, 89, 0, 0, 0, 0, 0, 6750, 0, 0, 0, 25088, 0, 8499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112, 119, 119, 112, 112, 119,
    119, 112, 112, 112, 112, 119, 119, 112, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 305, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    321, 0, 0, 9216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3074, 0, 2561, 0, 0, 0, 0, 89, 0, 13824, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 13824, 0, 0, 0, 0, 0, 13824, 13824, 0, 0, 13824, 0, 13824, 13824, 13824, 0, 0, 13824, 0, 0, 13824, 0, 0, 0, 13824, 0, 0, 13824, 2561, 3074, 0, 0, 6741,
    89, 89, 89, 0, 0, 0, 0, 0, 6750, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 6750, 6750, 2561, 3074, 0, 0, 0, 89, 0,
    0, 14336, 0, 0, 0, 0, 0, 0, 0, 1628, 0, 15360, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 0, 0, 7168, 6750, 7168, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0, 0, 0, 0, 2561, 3074, 0, 2561, 3074, 0, 0, 0, 89, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 0,
    93, 1628, 84, 84, 0, 0, 0, 84, 84, 84, 0, 0, 14848, 14848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18944, 18944, 0, 0, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0,
    0, 0, 0, 0, 6750, 0, 31744, 0, 0, 0, 8304, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 192, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 0, 0, 0, 2561, 3074, 0,
    0, 0, 87, 0, 0, 0, 0, 15360, 90, 0, 0, 0, 0, 0, 2561, 2561, 3074, 3074, 0, 89, 0, 0, 7168, 7168, 7168, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15360, 0,
    0, 0, 0, 24064, 0, 0, 24064, 0, 0, 0, 0, 0, 0, 0, 0, 14336, 0, 0, 14336, 0, 0, 0, 0, 15360, 15360, 15360, 0, 0, 15360, 0, 0, 0, 0, 15360, 0, 15360, 0, 0,
    15360, 2561, 3074, 0, 0, 6741, 78475, 140, 78475, 0, 0, 1628, 0, 0, 6750, 0, 0, 0, 9728, 9728, 0, 9728, 9728, 9728, 9728, 0, 9728, 0, 9728, 9728, 0, 0, 0,
    13312, 13312, 0, 0, 13312, 13312, 0, 13312, 0, 0, 13312, 13312, 0, 0, 0, 8985, 0, 0, 0, 0, 2846, 3359, 6944, 6945, 0, 291, 0, 293, 0, 0, 9728, 0, 0, 2561,
    2561, 3074, 3074, 0, 89, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 2561, 3074, 0, 0, 10752, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8304, 0,
    0, 0, 159, 0, 0, 0, 0, 1628, 0, 10752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 198, 0, 0, 0, 10752, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 10752, 0, 0, 0,
    10752, 0, 0, 2561, 2561, 3074, 3074, 0, 89, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 112, 0, 112, 0, 112, 112, 0, 10752, 0, 0, 0, 0, 10752, 0, 0, 10752, 0, 0, 0,
    10752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752, 0, 10752, 10752, 0, 10752, 0, 10752, 10752, 0, 2561, 3074, 0, 84, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388, 0,
    0, 0, 0, 0, 0, 0, 0, 1628, 84, 0, 0, 0, 0, 0, 0, 0, 0, 93, 84, 0, 0, 0, 0, 34304, 0, 0, 1628, 0, 0, 0, 0, 0, 34304, 34304, 34304, 0, 0, 34304, 0, 0, 34304,
    0, 0, 0, 34304, 0, 0, 0, 84, 84, 84, 0, 84, 84, 0, 0, 84, 84, 0, 84, 84, 84, 84, 16504, 16504, 84, 0, 16504, 16512, 0, 84, 0, 84, 16504, 16504, 84, 84,
    2561, 3074, 0, 6741, 6741, 89, 89, 89, 0, 0, 1628, 0, 6750, 6750, 6750, 303, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 8304, 8304, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 6750, 6741, 0, 0, 0, 82, 83, 86, 86, 95, 95, 95, 95, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33280, 0, 16896,
    16896, 16896, 121, 121, 16896, 16896, 121, 121, 16896, 16896, 16896, 16896, 121, 121, 16896, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0,
    0, 0, 13824, 13824, 0, 0, 13824, 13824, 0, 13824, 0, 0, 13824, 13824, 0, 0, 0, 8985, 0, 0, 21788, 0, 2846, 3359, 6944, 6945, 0, 0, 0, 0, 107, 0, 0, 107, 0,
    0, 0, 0, 0, 0, 0, 0, 195, 8304, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388, 0, 0, 0, 0, 0, 203, 0, 0, 1628, 0, 0, 0,
    17408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388, 0, 0, 0, 199, 0, 0, 0, 17408, 100, 100, 0, 0, 100, 0, 0, 17508, 0, 0, 100, 17508, 0, 100, 100, 100, 0, 0, 100, 100,
    17408, 0, 100, 100, 100, 100, 100, 17508, 100, 2561, 3074, 0, 0, 6741, 0, 88, 88, 15872, 0, 1628, 0, 0, 6750, 0, 0, 0, 17920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 9728, 9728, 9728, 0, 0, 2695, 3209, 0, 6741, 6794, 89, 89, 89, 0, 0, 1628, 0, 6750, 6798, 6750, 304, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    6893, 6750, 8908, 7842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
    8304, 8304, 8444, 0, 254, 0, 256, 0, 258, 0, 0, 8964, 0, 6750, 6741, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0, 2825, 3338,
    6923, 6924, 0, 0, 0, 0, 0, 8466, 0, 276, 0, 277, 0, 279, 0, 8985, 0, 0, 0, 0, 2846, 3359, 6944, 6945, 0, 0, 0, 0, 0, 2561, 2561, 3074, 3074, 0, 143872,
    143872, 0, 0, 0, 0, 0, 2561, 2561, 3074, 3074, 0, 78475, 0, 0, 0, 0, 0, 0, 11264, 0, 0, 11264, 0, 11264, 0, 0, 0, 0, 0, 8487, 0, 0, 297, 0, 298, 0, 8704, 0,
    0, 0, 0, 2561, 3074, 6741, 6741, 6750, 6750, 6750, 6750, 0, 0, 0, 0, 221, 8304, 8444, 0, 0, 0, 0, 0, 0, 0, 0, 8964, 0, 6750, 6741, 0, 0, 0, 154, 0, 0, 0, 0,
    0, 232, 0, 0, 0, 0, 95, 95, 0, 0, 2825, 3338, 6923, 6924, 0, 0, 0, 0, 0, 8466, 0, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 0, 0, 0, 14848, 0, 0, 14848, 0, 0, 0, 0,
    0, 8487, 0, 0, 0, 0, 0, 0, 8704, 0, 0, 0, 0, 2561, 3074, 6741, 6741, 6750, 6750, 6750, 6750, 0, 219, 0, 0, 0, 8304, 8444, 0, 200, 0, 231, 0, 0, 0, 0, 8964,
    0, 6750, 6741, 0, 0, 0, 191, 0, 0, 0, 0, 0, 8304, 29184, 0, 0, 0, 0, 0, 160, 0, 6750, 0, 169, 6750, 6750, 0, 0, 0, 6741, 0, 0, 2825, 3338, 6923, 6924, 0, 0,
    0, 0, 0, 8466, 0, 200, 0, 231, 0, 0, 280, 8985, 0, 0, 0, 0, 2846, 3359, 6944, 6945, 0, 0, 0, 0, 0, 23552, 0, 0, 0, 0, 23552, 0, 23552, 0, 23552, 23552, 0,
    8487, 0, 200, 231, 0, 0, 0, 8704, 0, 0, 0, 0, 2561, 3074, 6741, 6741, 6750, 6750, 6750, 6750, 28672, 0, 0, 220, 0, 8304, 8444, 0, 0, 0, 0, 0, 259, 0, 0,
    8964, 0, 6750, 6741, 0, 0, 0, 2561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 8985, 0, 0, 0, 0, 2846, 3359, 6944, 6945, 0, 0, 0, 0, 100, 0, 0, 1628,
    0, 0, 0, 0, 0, 0, 0, 100, 0, 8487, 0, 0, 0, 0, 259, 0, 8704, 0, 0, 0, 0, 2561, 3074, 6741, 6741, 6750, 6750, 6843, 6750, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 233,
    0, 0, 0, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 8304, 0, 0, 159, 0, 0, 0, 8304, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9216, 0, 0, 0, 0, 0, 0,
    0, 0, 8304, 0, 259, 0, 0, 0, 0, 26112, 0, 0, 0, 0, 0, 0, 6750, 1628, 6741, 6741, 0, 0, 102, 6741, 6741, 6741, 2561, 3074, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
    18432, 0, 0, 0, 0, 18549, 0, 18549, 18432, 18549, 18549, 0, 0, 1628, 0, 0, 0, 0, 18432, 0, 0, 0, 0, 0, 0, 18432, 0, 0, 18432, 18432, 1628, 0, 0, 0, 0, 0, 0,
    0, 0, 2561, 3074, 0, 7168, 0, 0, 0, 0, 18549, 18549, 18549, 0, 0, 18549, 18549, 0, 0, 18549, 18549, 18549, 18549, 0, 0, 18549, 2561, 3074, 0, 0, 6741, 89,
    89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 0, 19968, 0, 0, 0, 0, 0, 0, 19968, 0, 19968, 0, 19968, 20086, 19968, 0, 0, 20086, 19968, 0, 0, 19968, 20086, 19968,
    20100, 0, 0, 20101, 2561, 3074, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 18944, 0, 0, 0, 18944, 0, 0, 18944, 0, 0, 0, 18944, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0,
    18944, 0, 0, 0, 0, 0, 0, 0, 6750, 0, 0, 6750, 6750, 0, 0, 0, 6741, 20101, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 0, 33792, 0, 0,
    0, 1628, 0, 33792, 0, 0, 0, 0, 0, 0, 8865, 6750, 0, 165, 6750, 6750, 0, 0, 0, 6741, 2561, 3074, 0, 6741, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0,
    0, 27136, 27136, 0, 0, 0, 0, 1628, 6741, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6741, 0, 0, 0, 2561, 3074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6741, 2695, 3209,
    6741, 6741, 6794, 89, 89, 89, 0, 0, 1628, 6750, 6750, 6798, 6750, 8908, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 0, 2561, 3074, 6741,
    6750, 0, 0, 0, 250, 0, 0, 6741, 2561, 3074, 6741, 6741, 6741, 89, 89, 89, 0, 0, 1628, 6750, 6750, 6750, 6750, 0, 12288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750,
    6750, 6741, 6741, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 248, 0, 0, 0, 0, 3074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23552, 23552, 23552, 0, 0, 23552,
    23552, 0, 0, 23552, 23552, 23552, 23552, 0, 0, 23552, 2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 82, 83, 86, 95, 0, 0, 0, 0, 0, 154,
    0, 0, 201, 0, 0, 115, 3700, 0, 0, 0, 0, 0, 0, 0, 0, 125, 3710, 3711, 0, 0, 0, 8985, 0, 0, 0, 0, 2846, 3359, 6944, 6945, 0, 0, 0, 0, 0, 16896, 0, 0, 0, 0,
    16896, 0, 16896, 0, 16896, 16896, 82, 83, 0, 86, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 6863, 6750, 6865, 6741, 0, 0, 0, 1628, 86, 0, 0, 0, 0, 0,
    0, 0, 0, 95, 86, 0, 0, 0, 2561, 3074, 0, 0, 7168, 7168, 7168, 0, 0, 0, 32768, 0, 0, 0, 0, 2561, 3074, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 86, 86,
    0, 86, 86, 0, 0, 86, 86, 0, 86, 86, 86, 86, 95, 95, 86, 0, 95, 86, 0, 86, 0, 86, 95, 95, 86, 86, 2561, 3074, 86, 86, 6741, 89, 89, 89, 0, 0, 1628, 95, 95,
    6750, 95, 86, 86, 0, 0, 0, 82, 82, 83, 83, 86, 89, 0, 0, 95, 95, 95, 86, 86, 0, 0, 0, 0, 82, 83, 86, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 154,
    154, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 95, 86, 0, 0, 0, 2561, 3074, 0, 6741, 0, 6750, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 8304, 0, 154, 0, 0, 0, 232,
    0, 0, 0, 0, 0, 0, 0, 82, 83, 86, 95, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 0, 0, 0, 0, 6750, 1628, 6741, 6741, 0, 0, 103, 6741, 6741, 6741,
    2561, 3074, 0, 6741, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 157, 0, 0, 0, 0, 6750, 0, 167, 6750, 6750, 0, 0, 0, 6741, 6741, 6741, 0, 6741, 6741, 0, 0,
    6741, 6741, 0, 6741, 6741, 6741, 6741, 6750, 6750, 6741, 0, 6750, 6741, 0, 6741, 0, 6741, 6750, 6750, 6741, 0, 0, 1628, 6741, 0, 0, 0, 0, 0, 0, 0, 0, 6752,
    6741, 0, 0, 0, 2694, 3208, 0, 6838, 0, 6840, 0, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11264, 0, 104, 6741, 6741, 6741, 0, 6741,
    6741, 0, 104, 6741, 6741, 104, 6741, 6741, 6741, 6741, 6779, 6779, 6741, 0, 6779, 6785, 0, 6741, 0, 6741, 6779, 6779, 6741, 6741, 6741, 239, 0, 0, 0, 2803,
    3316, 6901, 6902, 0, 0, 0, 0, 0, 0, 6752, 1628, 6741, 6741, 91, 0, 0, 6741, 6741, 6741, 8908, 163, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 6750, 6750, 6741, 6741, 0,
    0, 0, 0, 2561, 3074, 6741, 6750, 0, 247, 0, 0, 0, 0, 158, 0, 0, 95, 0, 0, 95, 95, 0, 0, 0, 86, 0, 0, 8304, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 0,
    170, 6750, 6829, 0, 0, 0, 6741, 8908, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 30720, 0, 0, 0, 30208, 0,
    8908, 165, 0, 0, 0, 0, 0, 0, 0, 168, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 0, 2803, 3316, 6901, 6902, 0, 0, 0, 0, 0, 0, 95, 1628, 86, 86, 0, 0, 0, 86, 86, 86,
    0, 213, 0, 2775, 3288, 6741, 6873, 6750, 6874, 6750, 6750, 0, 0, 0, 0, 0, 8499, 0, 0, 0, 0, 0, 0, 0, 312, 0, 8304, 8444, 0, 0, 0, 0, 0, 0, 0, 23040, 8964,
    0, 6750, 6741, 0, 0, 0, 2775, 3288, 6741, 6873, 6750, 6874, 6750, 6750, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 264, 2825, 3338, 6923, 6924, 0,
    270, 0, 0, 0, 8466, 0, 0, 0, 0, 108, 15360, 0, 108, 0, 0, 15360, 0, 15360, 0, 15360, 15360, 0, 8487, 0, 0, 0, 0, 0, 0, 8704, 300, 0, 0, 0, 2561, 3074, 6741,
    6750, 0, 0, 0, 0, 0, 8304, 0, 0, 202, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 8388, 0, 0, 0, 0, 0, 0, 8865, 6750, 0, 0, 6750, 6750, 0, 0, 0, 6741, 8908, 166, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 0, 2803, 3316, 6901, 6902, 0, 0, 0, 0, 0, 251, 8304, 8444, 0, 0, 0, 0, 257, 0, 0, 0, 8964, 0, 6750,
    6741, 0, 0, 0, 7802, 7802, 0, 0, 7802, 7802, 0, 0, 0, 0, 7802, 7802, 0, 0, 0, 8304, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 0, 171, 6750, 6750, 0, 0,
    0, 6741, 0, 189, 0, 0, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 6750, 6750, 0, 0, 12288, 0, 0, 0, 0, 0, 0, 0, 12288, 6750, 6750, 6741, 6741,
    211, 0, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 242, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 8304, 263,
    0, 2561, 3074, 6741, 6750, 0, 0, 271, 0, 0, 8304, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 6750, 0, 12288, 6750, 6750, 0, 0, 0, 6741, 0, 25914, 8304, 0, 0,
    0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 109, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 0, 0, 6828, 6750, 0, 0, 0, 6741, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0,
    272, 0, 8304, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 0, 2561, 3074, 6741, 6741, 6750, 6750, 6750, 6750, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
    1628, 6741, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6741, 0, 98, 6741, 6741, 0, 178, 178, 2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6750, 6750, 0, 168, 12288, 0,
    12288, 0, 0, 12288, 0, 0, 206, 6750, 6750, 6741, 6741, 0, 0, 0, 2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6750, 6750, 212, 0, 0, 2561, 3074, 6741, 6741,
    6750, 6750, 6750, 6750, 0, 0, 0, 0, 0, 8499, 0, 0, 259, 0, 0, 0, 0, 0, 0, 6750, 1628, 6741, 6741, 0, 0, 0, 6741, 6741, 6741, 0, 0, 2561, 3074, 6741, 6750,
    269, 0, 0, 273, 0, 8304, 0, 0, 0, 0, 0, 233, 0, 0, 0, 301, 0, 2561, 3074, 6741, 6741, 2561, 3074, 6741, 6741, 6741, 89, 89, 89, 0, 141, 1628, 6750, 6750,
    6750, 6750, 0, 156, 0, 0, 159, 0, 0, 6750, 0, 0, 6750, 6750, 0, 0, 0, 6741, 6741, 6741, 0, 6741, 6741, 0, 113, 6741, 6741, 113, 6741, 6741, 6741, 6741,
    6780, 6780, 6741, 0, 6780, 6786, 0, 6741, 0, 6741, 6780, 6780, 6741, 6741, 6741, 0, 179, 179, 2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6750, 6750, 222,
    223, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 0, 0, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 31232, 8304, 0, 0, 0, 0, 111, 0, 0, 111, 0, 0,
    0, 0, 0, 0, 0, 0, 8865, 6750, 0, 166, 6750, 6750, 0, 0, 0, 6741, 0, 0, 8304, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 322, 155, 0, 0, 0, 0, 0, 0, 6750, 0, 0,
    6750, 6750, 0, 0, 0, 6741, 6741, 6741, 0, 6741, 6741, 0, 114, 6741, 6741, 114, 6741, 6741, 6741, 6741, 0, 0, 241, 0, 2803, 3316, 6901, 6902, 0, 0, 0, 0, 0,
    0, 6753, 1628, 6741, 6741, 0, 101, 0, 6741, 6741, 6741, 8304, 8304, 253, 0, 202, 0, 0, 0, 0, 0, 0, 0, 6750, 6741, 0, 262, 294, 8304, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 292, 0, 105, 6741, 6741, 6741, 0, 6741, 6741, 0, 105, 6741, 6741, 105, 6741, 6741, 6741, 6741, 0, 176, 176, 2561,
    2740, 3074, 3253, 6839, 89, 0, 0, 6841, 6750, 6750, 0, 169, 0, 205, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 2561, 2561, 3074, 3074, 6741, 89,
    0, 0, 6750, 6750, 6843, 6741, 6741, 0, 240, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 0, 8865, 6750, 0, 163, 6750, 6750, 0, 0, 0, 6741, 0, 0, 1628, 6741,
    0, 0, 0, 0, 0, 0, 0, 0, 6750, 6741, 0, 99, 6800, 0, 0, 0, 147, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 8304, 0, 227, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6831,
    0, 0, 0, 2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6750, 6750, 0, 170, 0, 0, 0, 12288, 0, 0, 0, 0, 0, 6750, 6750, 6741, 6741, 0, 0, 0, 2561, 2740, 3074,
    3253, 6839, 89, 0, 0, 6841, 6750, 6750, 6894, 6741, 0, 0, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 249, 0, 0, 0, 0, 12288, 0, 0, 0, 12288, 0, 0, 6750, 6750,
    6741, 6741, 0, 0, 0, 2561, 2740, 3074, 3253, 6839, 89, 0, 26624, 6841, 6750, 6750, 8304, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750, 6741, 261, 0, 0, 190, 0,
    0, 24576, 0, 0, 0, 8304, 0, 197, 0, 0, 0, 0, 110, 33792, 0, 33902, 0, 0, 33792, 0, 33792, 0, 33792, 33792, 0, 0, 8304, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 8865, 6750, 0, 164, 6750, 6750, 0, 0, 0, 6741, 106, 6741, 6741, 6741, 0, 6741, 6741, 0, 106, 6741, 6741, 106, 6741, 6741, 6741, 6741, 0, 177, 177, 2561,
    2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6750, 6750, 6741, 2561, 3074, 6741, 6741, 6741, 89, 89, 89, 0, 0, 1628, 6750, 6750, 6750, 6799, 6830, 6741, 0, 0, 0,
    2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6842, 6750, 8304, 8304, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 6750, 6741, 0, 0, 0, 8304, 29696, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 6750, 6750, 0, 8304, 296, 0, 0, 233, 0, 0, 0, 0, 20992, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 8304, 275, 0, 0, 0, 32256, 0, 8304, 0, 0, 0, 0,
    0, 0, 0, 2048, 0, 0, 27648, 0, 0, 0, 8418, 0, 0, 0, 0, 0, 0, 0, 8939, 0, 0, 6750, 6750, 28160, 22016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7168, 32768,
    0, 0, 1628, 6741, 0, 0, 0, 0, 0, 0, 0, 0, 6753, 6741, 0, 0, 0, 8418, 0, 0, 0, 0, 0, 0, 0, 8939, 0, 236, 6750, 6750, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6750,
    6750, 6741, 6741, 0, 0, 160, 2561, 2561, 3074, 3074, 6741, 89, 0, 0, 6750, 6750, 6750, 8304, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 6750, 6741, 0, 0, 0,
    8418, 0, 0, 200, 0, 231, 0, 0, 8939, 0, 0, 6750, 6750, 2561, 3074, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33280, 0, 0, 33280, 0, 33280, 0, 0, 0, 0, 0, 0,
    1628, 0, 0, 0, 0, 0, 0, 0, 33280, 0, 0, 0, 0, 0, 283, 0, 0, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33280, 0, 0,
    0, 0, 33280, 0, 1628, 0, 0, 33280, 0, 0, 0, 0, 0, 2561, 2561, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 10240, 0, 0, 10240, 0, 10240, 0, 0, 0, 0, 33792, 33792, 33792,
    0, 0, 33792, 0, 0, 0, 33792, 33792, 33792, 33792, 0, 0, 33792, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 0, 0, 33792, 2561, 3074, 0, 0, 6741,
    89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 214, 2775, 3288, 6741, 6873, 6750, 6874, 6750, 6750, 0, 0, 0, 0, 0, 8499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388, 0, 0,
    0, 200, 0, 0, 0, 34304, 1628, 0, 0, 0, 0, 0, 0, 0, 0, 34304, 0, 0, 0, 0, 282, 0, 0, 285, 2561, 3074, 6741, 6750, 0, 0, 0, 0, 0, 8499, 0, 0, 309, 0, 0, 0, 0,
    0, 0, 193, 0, 0, 8304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 2561, 3074, 6741, 34304, 0, 34304, 0, 0, 34304, 0, 0, 0, 0, 34304, 0, 0, 34304, 34304, 34304,
    2561, 3074, 0, 0, 6741, 89, 89, 89, 0, 0, 1628, 0, 0, 6750, 0, 0, 224, 8418, 0, 0, 0, 229, 0, 0, 0, 8939, 0, 0, 6750, 6750
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    16, 32, 48, 79, 95, 63, 126, 142, 158, 110, 174, 190, 196, 196, 196, 63, 331, 212, 216, 377, 497, 223, 225, 231, 242, 227, 240, 237, 246, 250, 254, 258,
    261, 265, 269, 273, 277, 282, 285, 340, 376, 377, 396, 291, 410, 301, 305, 557, 314, 329, 335, 339, 377, 377, 345, 545, 356, 358, 359, 364, 367, 373, 341,
    377, 377, 377, 310, 472, 377, 401, 377, 408, 405, 349, 414, 480, 421, 425, 429, 350, 544, 546, 360, 365, 368, 375, 377, 294, 383, 547, 308, 368, 375, 350,
    296, 297, 377, 278, 377, 352, 383, 388, 369, 376, 351, 384, 377, 351, 394, 347, 377, 390, 530, 526, 219, 377, 389, 538, 525, 218, 377, 551, 561, 395, 554,
    397, 433, 443, 440, 436, 447, 377, 377, 472, 532, 458, 464, 377, 493, 473, 377, 468, 503, 477, 377, 470, 533, 460, 522, 495, 501, 377, 377, 504, 509, 531,
    377, 534, 515, 233, 377, 366, 505, 510, 377, 514, 523, 377, 473, 325, 510, 377, 519, 524, 565, 377, 377, 377, 378, 323, 377, 379, 377, 454, 453, 317, 450,
    450, 320, 287, 483, 489, 541, 417, 486, 491, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 1048576, 16777216, 33554432,
    67108864, 134217728, 268435456, 536870912, 1073741824, 65536, 393216, 0, 1048640, 268435520, 64, 64, 64, 64, 12288, 100663364, 12288, 536875008, 268435456,
    0, 33554432, 0, 0, 100667456, 101716032, 100667456, 536875072, 1048640, 100663360, 268435520, 268435520, 0, 101716032, 100667456, 100667456, 4032,
    536907840, 101716032, 4032, 134217728, 101716040, 541102144, 134217792, 541102080, 101716040, 541102144, 541102080, 541102144, 541102144, -2037944320,
    -2037944256, 541102144, 8159296, -2037944256, -1768468416, 8159296, 641765440, 276594752, 541102144, -2036895680, -2036895680, 541102144, 641765440, 16, 32,
    4096, 12288, 4096, 4096, 16777216, 16777216, 1073741824, 0, 4, 2, 0, 512, 256, 128, 32768, 32768, 8, 4194304, 4194304, 4194304, 65536, 4194304, 0, 65536,
    8548352, 8536064, 8536064, 12288, 12288, 4096, 0, 0, 8, 16, 4096, 4096, 1310784, 0, 2, 1, 0, 2, 4, 2, 4, 0, 0, 1048576, 1048576, 0, 16, 16, 32, 64, 4096,
    32, 4096, 16777216, 16777216, 0, 12288, 12288, 12288, 12288, 0, 0, 32768, 0, 0, 8, 0, 0, 0, 32768, 8, 4194304, 65536, 8536064, 8388608, 8388608, 8388608,
    8388608, 12288, 12288, 12288, 4096, 4096, 0, 0, 0, 16, 32, 4096, 32, 4096, 4096, 12288, 0, 0, 0, 0, 1, 4, 4194304, 4194304, 4194304, 4194304, 0, 65536, 0,
    0, 0, 128, 256, 4194304, 0, 0, 0, 1024, 2048, 2097152, 2, 8, 16, 16384, 8, 0, 4, 8, 142606336, 0, 0, 8, 1048648, 524288, -2147483648, 1616904192, 0, 3, 6,
    3, 20, 68, 16416, 8201, 20, 16416, 386367488, 22, 8265, 386367488, 8269, 30, 8265, 12365, 8269, 12365, 8269, 12237, -2146435052, 8269, -2146435070,
    -2146435072, 8269, -2146435072, -2146435072, 12365, -2146435050, 16333, 16333, 0, 4, 4, 4, 1, 0, 0, 2, 134217728, 4, -2147483648, 6291456, 1610612736,
    32768, 1610612736, 491520, 67108864, 268435456, 1048576, -2147483648, 0, 0, 524288, 0, 0, 0, 4096, 0, 3968, 8064, 0, 4, 336035840, 2, 4, 3, 2, 4, 4, 6, 2,
    6, 0, 0, 0, 16777216, 33554432, 0, 0, 68, 4160, 0, 4096, 0, 0, 1048576, -2147483648, 1048576, -2147483648, -2147483648, 128, 256, 1536, 2048, 134217728,
    6291456, 1610612736, 458752, 67108864, 6291456, 536870912, 1073741824, 458752, 67108864, 268435456, 0, 0, 0, 6291456, 536870912, 1536, 2048, 0, 0, 0,
    8388608, 134217728, -2147483648, 256, 1024, 2048, 0, 6, 1, 0, 8, 4194304, 4194304, 0, 65536, 8388608, 0, 128, 1024, 2048, 2097152, 4194304, 262144, 262208,
    3932224, 8540160, 2097152, 4194304, 1073741824, 393216, 4194304, 1024, 4194304, 1024
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'BARE_URL_CHARS',
    'important',
    'STRING_CONTENT1',
    'STRING_CONTENT2',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'&quot;&quot;'&quot;,
    &quot;''''&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@media print'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'@page'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'all'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'amzn-mobi7'&quot;,
    &quot;'and'&quot;,
    &quot;'attr('&quot;,
    &quot;'bottom-left'&quot;,
    &quot;'bottom-right'&quot;,
    &quot;'left'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'print'&quot;,
    &quot;'right'&quot;,
    &quot;'screen'&quot;,
    &quot;'top-left'&quot;,
    &quot;'top-right'&quot;,
    &quot;'url('&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="$end - $result idiv 128"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 128 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 32"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 32 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 16"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 2">
        <xsl:variable name="i0" select=". * 322 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:variable name="i2" select="$i1 idiv 16"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 16 + $p:EXPECTED[$i2 + 1] + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse arearule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-arearule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>          <!-- 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'bottom-left' -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- 'bottom-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'bottom-right' -->
          <xsl:variable name="state" select="p:consume(54, $input, $state)"/>       <!-- 'bottom-right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 61">                                        <!-- 'top-left' -->
          <xsl:variable name="state" select="p:consume(61, $input, $state)"/>       <!-- 'top-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(62, $input, $state)"/>       <!-- 'top-right' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'arearule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (774,                               (: S S :)
                                                   8454)">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 34                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 4358                                     (: S '/*' :)
                        and $state[$p:lk] != 205062                                   (: S '}' IDENT :)
                        and $state[$p:lk] != 418054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 434438                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 557830">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 15)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4358                                       (: S '/*' :)
                      and $state[$p:lk] != 557830">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-areaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 36">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 804">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4388">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8484">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99108                                     (: ';' S S :)
                         or $state[$p:lk] = 106788                                    (: ';' '}' S :)
                         or $state[$p:lk] = 397604                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 557860                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 565540                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 1082148                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089828">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 17)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4358">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4614)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 557830                         (: S S '/*' :)
                                  and $state[$p:lk] != 590598">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 18)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 557830                          (: S S '/*' :)
                                   or $state[$p:lk] = 590598">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4492">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 19)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1572                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3236                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3364                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4614                                       (: S ';' :)
                      and $state[$p:lk] != 4644                                       (: ';' ';' :)
                      and $state[$p:lk] != 197412                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410404                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426788                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 590628">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(36, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4358">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4614)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 557830                               (: S S '/*' :)
                            and $state[$p:lk] != 590598">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 18)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 557830                                (: S S '/*' :)
                             or $state[$p:lk] = 590598">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4492">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 19)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-areaquery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 36">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 804">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4388">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8484">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99108                                     (: ';' S S :)
                         or $state[$p:lk] = 106788                                    (: ';' '}' S :)
                         or $state[$p:lk] = 397604                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 557860                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 565540                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 1082148                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089828">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 17)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4358">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4614)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 557830                         (: S S '/*' :)
                                  and $state[$p:lk] != 590598">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 18)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 557830                          (: S S '/*' :)
                                   or $state[$p:lk] = 590598">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4492">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 19)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 17, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-areaquery-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1572                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3236                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3364                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4614                                       (: S ';' :)
                      and $state[$p:lk] != 4644                                       (: ';' ';' :)
                      and $state[$p:lk] != 197412                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410404                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426788                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 590628">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4358">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4614)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 557830                               (: S S '/*' :)
                            and $state[$p:lk] != 590598">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 18)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 557830                                (: S S '/*' :)
                             or $state[$p:lk] = 590598">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4492">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 19)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-areaquery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production areaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-areaquery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 34">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3106">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494626">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 16)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 34">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-areaquery-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-areaquery-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 36">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 8454">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 34                               (: '/*' :)
                                and $state[$p:lk] != 66                               (: '}' :)
                                and $state[$p:lk] != 4358">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 20)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4358">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-areaquery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-areaquery-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(36, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8454">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | '/*' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 34                                     (: '/*' :)
                          and $state[$p:lk] != 66                                     (: '}' :)
                          and $state[$p:lk] != 4358">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 20)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4358">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-areaquery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 34">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-areaquery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse areaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-arearule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-areaquery-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'areaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pagearea.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagearea" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>          <!-- 'left' | 'right' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 55">                                        <!-- 'left' -->
          <xsl:variable name="state" select="p:consume(55, $input, $state)"/>       <!-- 'left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(59, $input, $state)"/>       <!-- 'right' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagearea', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pagerule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagerule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '@page' -->
    <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>          <!-- S | ':' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 6">                                        <!-- S -->
          <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/>    <!-- S | ':' | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 8198">                               <!-- S '{' -->
                <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 35                                           (: ':' :)
                    and $state[$p:lk] != 64                                           (: '{' :)
                    and $state[$p:lk] != 774                                          (: S S :)
                    and $state[$p:lk] != 4486">                                     <!-- S ':' -->
          <xsl:variable name="state" select="p:memoized($state, 24)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>   <!-- S -->
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 774                                           (: S S :)
                     or $state[$p:lk] = 4486">                                      <!-- S ':' -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>          <!-- S | ':' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pagearea($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagerule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8454">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '"' | "'" | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 34                                       (: '/*' :)
                        and $state[$p:lk] != 38                                       (: '@' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 4358                                     (: S '/*' :)
                        and $state[$p:lk] != 4870                                     (: S '@' :)
                        and $state[$p:lk] != 418054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 434438                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 557830                                   (: S S '/*' :)
                        and $state[$p:lk] != 623366">                               <!-- S S '@' -->
              <xsl:variable name="state" select="p:memoized($state, 9)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4358                                       (: S '/*' :)
                      and $state[$p:lk] != 4870                                       (: S '@' :)
                      and $state[$p:lk] != 557830                                     (: S S '/*' :)
                      and $state[$p:lk] != 623366">                                 <!-- S S '@' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pagequery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-pagequery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 36">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 804">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4388">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8484">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99108                                     (: ';' S S :)
                         or $state[$p:lk] = 106788                                    (: ';' '}' S :)
                         or $state[$p:lk] = 205092                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 254244                                    (: ';' '}' HASH :)
                         or $state[$p:lk] = 368932                                    (: ';' '}' NOT :)
                         or $state[$p:lk] = 397604                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 483620                                    (: ';' '}' '*' :)
                         or $state[$p:lk] = 532772                                    (: ';' '}' '.' :)
                         or $state[$p:lk] = 557860                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 565540                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 581924                                    (: ';' '}' ':' :)
                         or $state[$p:lk] = 631076                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 729380                                    (: ';' '}' '@page' :)
                         or $state[$p:lk] = 745764                                    (: ';' '}' '[' :)
                         or $state[$p:lk] = 1073444                                   (: ';' '}' '|' :)
                         or $state[$p:lk] = 1082148                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089828">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 11)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4358">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' |
                                                                                                          '@' | '@page' | '[' | '|' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4614)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 557830                         (: S S '/*' :)
                                  and $state[$p:lk] != 590598">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 12)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 557830                          (: S S '/*' :)
                                   or $state[$p:lk] = 590598">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4492">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 13)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1572                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3236                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3364                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4614                                       (: S ';' :)
                      and $state[$p:lk] != 4644                                       (: ';' ';' :)
                      and $state[$p:lk] != 197412                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410404                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426788                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 590628">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(36, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4358">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                    '@page' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4614)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 557830                               (: S S '/*' :)
                            and $state[$p:lk] != 590598">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 12)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 557830                                (: S S '/*' :)
                             or $state[$p:lk] = 590598">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4492">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 13)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-pagequery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pagequery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 36">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 804">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4388">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8484">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99108                                     (: ';' S S :)
                         or $state[$p:lk] = 106788                                    (: ';' '}' S :)
                         or $state[$p:lk] = 205092                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 254244                                    (: ';' '}' HASH :)
                         or $state[$p:lk] = 368932                                    (: ';' '}' NOT :)
                         or $state[$p:lk] = 397604                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 483620                                    (: ';' '}' '*' :)
                         or $state[$p:lk] = 532772                                    (: ';' '}' '.' :)
                         or $state[$p:lk] = 557860                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 565540                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 581924                                    (: ';' '}' ':' :)
                         or $state[$p:lk] = 631076                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 729380                                    (: ';' '}' '@page' :)
                         or $state[$p:lk] = 745764                                    (: ';' '}' '[' :)
                         or $state[$p:lk] = 1073444                                   (: ';' '}' '|' :)
                         or $state[$p:lk] = 1082148                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1089828">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 11)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4358">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' |
                                                                                                          '@' | '@page' | '[' | '|' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4614)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 557830                         (: S S '/*' :)
                                  and $state[$p:lk] != 590598">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 12)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 557830                          (: S S '/*' :)
                                   or $state[$p:lk] = 590598">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4492">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 13)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 11, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-pagequery-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1572                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3236                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3364                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4614                                       (: S ';' :)
                      and $state[$p:lk] != 4644                                       (: ';' ';' :)
                      and $state[$p:lk] != 197412                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410404                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426788                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 590628">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4358">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                    '@page' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4614)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 557830                               (: S S '/*' :)
                            and $state[$p:lk] != 590598">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 12)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 557830                                (: S S '/*' :)
                             or $state[$p:lk] = 590598">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4492">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 13)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-pagequery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production pagequery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-pagequery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 34">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3106">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494626">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 10)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 34">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-pagequery-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-pagequery-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 36">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 8454">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                        '@page' | '[' | '|' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 34                               (: '/*' :)
                                and $state[$p:lk] != 66                               (: '}' :)
                                and $state[$p:lk] != 4358">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 14)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4358">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 10, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 10, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-pagequery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-pagequery-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(36, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8454">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                  '@page' | '[' | '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 34                                     (: '/*' :)
                          and $state[$p:lk] != 66                                     (: '}' :)
                          and $state[$p:lk] != 4358">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 14)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4358">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-pagequery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 34">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-pagequery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse pagequery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-pagerule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-pagequery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '@' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-areaquery($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-pagequery-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-pagequery-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-pagequery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagequery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse printcssrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- '@media print' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'printcssrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production printcssquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(65, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' | '[' |
                                                                                         '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 34">                                   <!-- '/*' -->
              <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/> <!-- CommentContents -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 3106">                           <!-- '/*' CommentContents -->
                    <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 494626">                                <!-- '/*' CommentContents '*/' -->
              <xsl:variable name="state" select="p:memoized($state, 7)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-COMMENT($input, $state)
                  "/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-printcssquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production printcssquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(69, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' | '[' |
                                                                                         '|' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                          '[' | '|' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1926">                           <!-- S HASH -->
                    <xsl:variable name="state" select="p:lookahead3(70, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' |
                                                                                                ':' | '@' | '[' | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2822">                           <!-- S NOT -->
                    <xsl:variable name="state" select="p:lookahead3(53, $input, $state)"/> <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4358">                           <!-- S '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4486">                           <!-- S ':' -->
                    <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 5638">                           <!-- S '@page' -->
                    <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | ':' | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 5766">                           <!-- S '[' -->
                    <xsl:variable name="state" select="p:lookahead3(41, $input, $state)"/> <!-- S | IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8326">                           <!-- S '|' -->
                    <xsl:variable name="state" select="p:lookahead3(29, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8454">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(76, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1542,                              (: S IDENT :)
                                                   3718)">                          <!-- S '*' -->
                    <xsl:variable name="state" select="p:lookahead3(73, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' |
                                                                                                ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (4102,                              (: S '.' :)
                                                   4870)">                          <!-- S '@' -->
                    <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 15                                       (: HASH :)
                        and $state[$p:lk] != 22                                       (: NOT :)
                        and $state[$p:lk] != 29                                       (: '*' :)
                        and $state[$p:lk] != 32                                       (: '.' :)
                        and $state[$p:lk] != 34                                       (: '/*' :)
                        and $state[$p:lk] != 35                                       (: ':' :)
                        and $state[$p:lk] != 38                                       (: '@' :)
                        and $state[$p:lk] != 44                                       (: '@page' :)
                        and $state[$p:lk] != 45                                       (: '[' :)
                        and $state[$p:lk] != 65                                       (: '|' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 99078                                    (: S S S :)
                        and $state[$p:lk] != 1082118">                              <!-- S S '}' -->
              <xsl:variable name="state" select="p:memoized($state, 8)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 99078                                      (: S S S :)
                      and $state[$p:lk] != 1082118">                                <!-- S S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-printcssquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production printcssquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-printcssquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(69, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(69, $input, $state)"/>  <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' | '[' |
                                                                                         '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                            '[' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 1926">                         <!-- S HASH -->
                      <xsl:variable name="state" select="p:lookahead3(70, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' |
                                                                                                  ':' | '@' | '[' | '{' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 2822">                         <!-- S NOT -->
                      <xsl:variable name="state" select="p:lookahead3(53, $input, $state)"/> <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4358">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4486">                         <!-- S ':' -->
                      <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 5638">                         <!-- S '@page' -->
                      <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | ':' | '{' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 5766">                         <!-- S '[' -->
                      <xsl:variable name="state" select="p:lookahead3(41, $input, $state)"/> <!-- S | IDENT | '*' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8326">                         <!-- S '|' -->
                      <xsl:variable name="state" select="p:lookahead3(29, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = (1542,                            (: S IDENT :)
                                                     3718)">                        <!-- S '*' -->
                      <xsl:variable name="state" select="p:lookahead3(73, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' |
                                                                                                  ':' | '@' | '[' | '{' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = (4102,                            (: S '.' :)
                                                     4870)">                        <!-- S '@' -->
                      <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- IDENT -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 15                                     (: HASH :)
                          and $state[$p:lk] != 22                                     (: NOT :)
                          and $state[$p:lk] != 29                                     (: '*' :)
                          and $state[$p:lk] != 32                                     (: '.' :)
                          and $state[$p:lk] != 34                                     (: '/*' :)
                          and $state[$p:lk] != 35                                     (: ':' :)
                          and $state[$p:lk] != 38                                     (: '@' :)
                          and $state[$p:lk] != 44                                     (: '@page' :)
                          and $state[$p:lk] != 45                                     (: '[' :)
                          and $state[$p:lk] != 65                                     (: '|' :)
                          and $state[$p:lk] != 774">                                <!-- S S -->
                <xsl:variable name="state" select="p:memoized($state, 6)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 774">                                 <!-- S S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-printcssquery-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(63, $input, $state)"/>    <!-- IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '@page' | '[' |
                                                                                         '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 44">                                  <!-- '@page' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-pagequery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-query_declaration($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-printcssquery-3($input, $state)"/>
          <xsl:sequence select="p:parse-printcssquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse printcssquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-printcssrule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-printcssquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'printcssquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse media_feature_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_feature_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'media_feature_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse media_feature_expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_feature_expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- S | IDENT -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-media_feature_name($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>          <!-- S | ')' | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 6">                                        <!-- S -->
          <xsl:variable name="state" select="p:lookahead2(30, $input, $state)"/>    <!-- ')' | ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 35                                            (: ':' :)
                     or $state[$p:lk] = 4486">                                      <!-- S ':' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>    <!-- ':' -->
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- ':' -->
          <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>    <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- S | ')' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'media_feature_expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse and.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-and" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- 'and' -->
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- 'and' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'and', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse media_type.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_type" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>          <!-- 'all' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'print' |
                                                                                         'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'all' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'all' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- 'print' -->
          <xsl:variable name="state" select="p:consume(58, $input, $state)"/>       <!-- 'print' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 60">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(60, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'amzn-mobi7' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'media_type', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse only.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-only" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(57, $input, $state)"/>             <!-- 'only' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'only', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse not.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-not" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(56, $input, $state)"/>             <!-- 'not' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'not', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse notonly.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-notonly" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- 'not' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-not($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-only($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'notonly', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production media_query (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_query-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | COMMA | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | COMMA | 'and' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 6534">                                   <!-- S 'and' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-and($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>   <!-- S -->
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-media_feature_expression($input, $state)
            "/>
            <xsl:sequence select="p:parse-media_query-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production media_query (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_query-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | COMMA | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | COMMA | 'and' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 6534">                                   <!-- S 'and' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-and($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>   <!-- S -->
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-media_feature_expression($input, $state)
            "/>
            <xsl:sequence select="p:parse-media_query-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production media_query (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_query-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | COMMA | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(32, $input, $state)"/> <!-- S | COMMA | '{' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(32, $input, $state)"/> <!-- S | COMMA | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2566">                           <!-- S COMMA -->
                    <xsl:variable name="state" select="p:lookahead3(59, $input, $state)"/> <!-- S | '(' | 'all' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' |
                                                                                                'not' | 'only' | 'print' | 'screen' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8198">                           <!-- S '{' -->
                    <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                                '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 20                                       (: COMMA :)
                        and $state[$p:lk] != 64                                       (: '{' :)
                        and $state[$p:lk] != 99078                                    (: S S S :)
                        and $state[$p:lk] != 328454">                               <!-- S S COMMA -->
              <xsl:variable name="state" select="p:memoized($state, 23)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 99078                                      (: S S S :)
                      and $state[$p:lk] != 328454">                                 <!-- S S COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-media_query-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse media_query.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_query" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>          <!-- '(' | 'all' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'not' |
                                                                                         'only' | 'print' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-media_feature_expression($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-media_query-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 56                                      (: 'not' :)
                           or $state[$p:l1] = 57">                                  <!-- 'only' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-notonly($input, $state)
                "/>
                <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/> <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-media_type($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-media_query-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-media_query-3($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'media_query', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production media_query_list (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_query_list-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | COMMA | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 20">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>  <!-- S | '(' | 'all' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'not' |
                                                                                         'only' | 'print' | 'screen' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-media_query($input, $state)
            "/>
            <xsl:sequence select="p:parse-media_query_list-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse media_query_list.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-media_query_list" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-media_query($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 6">                                        <!-- S -->
          <xsl:variable name="state" select="p:lookahead2(32, $input, $state)"/>    <!-- S | COMMA | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 8198">                               <!-- S '{' -->
                <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '[' | '|' |
                                                                                            '}' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 64                                           (: '{' :)
                    and $state[$p:lk] != 774                                          (: S S :)
                    and $state[$p:lk] != 2566">                                     <!-- S COMMA -->
          <xsl:variable name="state" select="p:memoized($state, 22)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>   <!-- S -->
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 774                                           (: S S :)
                     or $state[$p:lk] = 2566">                                      <!-- S COMMA -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-media_query_list-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'media_query_list', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(6, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-media_query_list($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(60, $input, $state)"/>      <!-- IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 34">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '[' | '|' |
                                                                                         '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(64, $input, $state)"/>  <!-- IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' | '[' | '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production import (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>      <!-- S | '"' | "'" | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-import-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production import (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-import-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse import.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(40, $input, $state)"/>             <!-- '@import' -->
    <xsl:variable name="state" select="p:parse-import-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-import-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'import', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- S | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_atrule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-simple_atrule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(39, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QUOTED_STRING($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-simple_atrule-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(67, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'attr(' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'attr(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ATTR($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(67, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'attr(' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'attr(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ATTR($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>      <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>      <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>      <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consumeT(31, $input, $state)"/>      <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | '/' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | '/' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>        <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ';' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(78, $input, $state)"/>  <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | '-' | '/' | '/*' | ';' | 'attr(' | 'url(' |
                                                                                         '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(49, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/' | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] eq 1542">                             <!-- S IDENT -->
                  <xsl:variable name="state" select="p:lookahead3(61, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ':' |
                                                                                              ';' | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] eq 3206">                             <!-- S '"' -->
                  <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] eq 3334">                             <!-- S "'" -->
                  <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 68742                                       (: S '&quot;' STRING_CONTENT1 :)
                       or $state[$p:lk] = 85254                                       (: S &quot;'&quot; STRING_CONTENT2 :)
                       or $state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 99846">                                   <!-- S IDENT S -->
            <xsl:variable name="state" select="p:memoized($state, 25)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(71, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                  DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = 33                                (: '/' :)
                                 or $state[$p:lk] = 774                               (: S S :)
                                 or $state[$p:lk] = 4230">                          <!-- S '/' -->
                      <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
                      <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/> <!-- '/' -->
                      <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-value($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-value($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 3                                             (: important :)
                     or $state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 20                                            (: COMMA :)
                     or $state[$p:lk] = 25                                            (: '&quot;' :)
                     or $state[$p:lk] = 26                                            (: &quot;'&quot; :)
                     or $state[$p:lk] = 34                                            (: '/*' :)
                     or $state[$p:lk] = 36                                            (: ';' :)
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 2566                                          (: S COMMA :)
                     or $state[$p:lk] = 4358                                          (: S '/*' :)
                     or $state[$p:lk] = 4614                                          (: S ';' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 197382                                        (: S S IDENT :)
                     or $state[$p:lk] = 328454                                        (: S S COMMA :)
                     or $state[$p:lk] = 410374                                        (: S S '&quot;' :)
                     or $state[$p:lk] = 426758                                        (: S S &quot;'&quot; :)
                     or $state[$p:lk] = 574982                                        (: S IDENT ':' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(71, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                            DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 33                                      (: '/' :)
                           or $state[$p:lk] = 774                                     (: S S :)
                           or $state[$p:lk] = 4230">                                <!-- S '/' -->
                <xsl:variable name="state" select="p:parse-values-2($input, $state)"/>
                <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '/' -->
                <xsl:variable name="state" select="p:parse-values-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-value($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-value($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-values-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(78, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/' | '/*' | ';' | 'attr(' | 'url(' |
                                                                                          '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(49, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(61, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ':' |
                                                                                                ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99078                                     (: S S S :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 25)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(71, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = 33                              (: '/' :)
                                   or $state[$p:lk] = 774                             (: S S :)
                                   or $state[$p:lk] = 4230">                        <!-- S '/' -->
                        <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
                        <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 25, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 34                                          (: '/*' :)
                       or $state[$p:lk] = 36                                          (: ';' :)
                       or $state[$p:lk] = 66                                          (: '}' :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4358                                        (: S '/*' :)
                       or $state[$p:lk] = 4614                                        (: S ';' :)
                       or $state[$p:lk] = 8454                                        (: S '}' :)
                       or $state[$p:lk] = 197382                                      (: S S IDENT :)
                       or $state[$p:lk] = 328454                                      (: S S COMMA :)
                       or $state[$p:lk] = 410374                                      (: S S '&quot;' :)
                       or $state[$p:lk] = 426758                                      (: S S &quot;'&quot; :)
                       or $state[$p:lk] = 574982                                      (: S IDENT ':' :)
                       or $state[$p:lk] = 1082118">                                 <!-- S S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(71, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                              DIMENSION | '"' | "'" | '-' | '/' | 'attr(' | 'url(' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 33                                    (: '/' :)
                             or $state[$p:lk] = 774                                   (: S S :)
                             or $state[$p:lk] = 4230">                              <!-- S '/' -->
                  <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
                  <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 6th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 7th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-7">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(77, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'attr(' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(61, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ':' |
                                                                                                ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 27)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 27, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 27, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 34                                          (: '/*' :)
                       or $state[$p:lk] = 36                                          (: ';' :)
                       or $state[$p:lk] = 66                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4358                                        (: S '/*' :)
                       or $state[$p:lk] = 4614                                        (: S ';' :)
                       or $state[$p:lk] = 8454                                        (: S '}' :)
                       or $state[$p:lk] = 574982">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-7($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 7th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-7">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(77, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'attr(' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(61, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ':' |
                                                                                                ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 27)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 27, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 27, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-7($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 34                                          (: '/*' :)
                       or $state[$p:lk] = 36                                          (: ';' :)
                       or $state[$p:lk] = 66                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4358                                        (: S '/*' :)
                       or $state[$p:lk] = 4614                                        (: S ';' :)
                       or $state[$p:lk] = 8454                                        (: S '}' :)
                       or $state[$p:lk] = 574982">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-7($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 4th loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-4">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(54, $input, $state)"/>  <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(46, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078">                                   <!-- S S S -->
            <xsl:variable name="state" select="p:memoized($state, 26)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                <xsl:variable name="state" select="p:try-values-6($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-value($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-values-7($input, $state)"/>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 26, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 26, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] != -1
                    and $state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 2566                                         (: S COMMA :)
                    and $state[$p:lk] != 328454">                                   <!-- S S COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-values-5($input, $state)"/>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-values-6($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-values-7($input, $state)"/>
          <xsl:sequence select="p:parse-values-4($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(54, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(46, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99078">                                 <!-- S S S -->
              <xsl:variable name="state" select="p:memoized($state, 26)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                  <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                  <xsl:variable name="state" select="p:try-values-6($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:try-values-7($input, $state)"/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 26, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 26, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 20                                         (: COMMA :)
                      and $state[$p:lk] != 2566                                       (: S COMMA :)
                      and $state[$p:lk] != 328454">                                 <!-- S S COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
            <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>    <!-- COMMA -->
            <xsl:variable name="state" select="p:try-values-6($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-value($input, $state)
            "/>
            <xsl:variable name="state" select="p:try-values-7($input, $state)"/>
            <xsl:sequence select="p:try-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-values-4($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consumeT(3, $input, $state)"/>       <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(61, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ':' | ';' |
                                                                                          '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 537">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 666">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 410137                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 426650">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 21)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4492">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consume(35, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(61, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | '/' | '/*' | ':' | ';' |
                                                                                          '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 537">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 666">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 410137                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 426650">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 21)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 21, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4492">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>    <!-- ':' -->
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:try-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-values($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '*/' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'COMMENT', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/>            <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consumeT(24, $input, $state)"/>            <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/>            <!-- '*/' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 65">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(29, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (12,                                          (: IDENT :)
                                         29)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(35, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (8332,                                  (: IDENT '|' :)
                                               8349)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(29, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 780                                           (: IDENT S :)
                     or $state[$p:lk] = 1601                                          (: '|' IDENT :)
                     or $state[$p:lk] = 3596                                          (: IDENT ')' :)
                     or $state[$p:lk] = 204940                                        (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 204957">                                    <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 15">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 32">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 45">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 35">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ATTR.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ATTR" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- 'attr(' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ATTR', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ATTR.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ATTR" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(52, $input, $state)"/>            <!-- 'attr(' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- BARE_URL_CHARS -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'BARE_URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>             <!-- BARE_URL_CHARS -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(63, $input, $state)"/>             <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(63, $input, $state)"/>            <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:try-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:try-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(72, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(72, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 18">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 63">                                      <!-- 'url(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-URL($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 52">                                      <!-- 'attr(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ATTR($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 31">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(31, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 14">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(14, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 12">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(12, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 20">                                      <!-- COMMA -->
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-QUOTED_STRING($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 18">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>  <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>  <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 63">                                    <!-- 'url(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-URL($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 52">                                    <!-- 'attr(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-ATTR($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>  <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 31">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consumeT(31, $input, $state)"/>  <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 23">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>  <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>  <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 12">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>  <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 20">                                    <!-- COMMA -->
              <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>  <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-QUOTED_STRING($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:try-expression-2($input, $state)"/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 28">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-expression-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(72, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(72, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 28">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-expression($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- FUNCTION -->
    <xsl:variable name="state" select="p:try-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 28">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-expression($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QUOTED_STRING', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 65                                            (: '|' :)
                     or $state[$p:lk] = 8332">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 46">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 11">                                  <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-QUOTED_STRING($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 29">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(75, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | ')' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 65                                            (: '|' :)
                     or $state[$p:lk] = 8349">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- '*' -->
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 65">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(65, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(75, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | ')' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 65                                            (: '|' :)
                     or $state[$p:lk] = 8332">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(70, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 32                                         (: '.' :)
                      and $state[$p:l1] != 35                                         (: ':' :)
                      and $state[$p:l1] != 38                                         (: '@' :)
                      and $state[$p:l1] != 45">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 15">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(15, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 32">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 45">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 35">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 32">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 45">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 35">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(70, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 32                                         (: '.' :)
                      and $state[$p:l1] != 35                                         (: ':' :)
                      and $state[$p:l1] != 38                                         (: '@' :)
                      and $state[$p:l1] != 45">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 29                                            (: '*' :)
                     or $state[$p:l1] = 65">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 65">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(29, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (12,                                    (: IDENT :)
                                               29)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(73, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '.' | '/*' | ':' |
                                                                                            '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (8332,                            (: IDENT '|' :)
                                                     8349)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(29, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 780                                     (: IDENT S :)
                           or $state[$p:lk] = 1601                                    (: '|' IDENT :)
                           or $state[$p:lk] = 1932                                    (: IDENT HASH :)
                           or $state[$p:lk] = 2316                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 2444                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 2572                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 2700                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 2828                                    (: IDENT NOT :)
                           or $state[$p:lk] = 4108                                    (: IDENT '.' :)
                           or $state[$p:lk] = 4364                                    (: IDENT '/*' :)
                           or $state[$p:lk] = 4492                                    (: IDENT ':' :)
                           or $state[$p:lk] = 4876                                    (: IDENT '@' :)
                           or $state[$p:lk] = 5772                                    (: IDENT '[' :)
                           or $state[$p:lk] = 8204                                    (: IDENT '{' :)
                           or $state[$p:lk] = 204940                                  (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 204957">                              <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(62, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '*' | '.' | ':' | '@' | '[' | '{' | '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 34                                          (: '/*' :)
                       or $state[$p:lk] = 64                                          (: '{' :)
                       or $state[$p:lk] = 8198">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 34">                                       <!-- '/*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8454">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(80, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '"' | "'" | '*' | '.' | '/*' |
                                                                                                ':' | '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 34                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 4358                                     (: S '/*' :)
                        and $state[$p:lk] != 418054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 434438                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 557830">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4358                                       (: S '/*' :)
                      and $state[$p:lk] != 557830">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 36">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 804">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4388">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8484">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 34                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 774                                      (: S S :)
                        and $state[$p:lk] != 1542                                     (: S IDENT :)
                        and $state[$p:lk] != 1572                                     (: ';' IDENT :)
                        and $state[$p:lk] != 3206                                     (: S '&quot;' :)
                        and $state[$p:lk] != 3236                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 3334                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 3364                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 4358                                     (: S '/*' :)
                        and $state[$p:lk] != 4614                                     (: S ';' :)
                        and $state[$p:lk] != 4644                                     (: ';' ';' :)
                        and $state[$p:lk] != 8454                                     (: S '}' :)
                        and $state[$p:lk] != 197412                                   (: ';' S IDENT :)
                        and $state[$p:lk] != 410404                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 426788                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 590628">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 2)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4358">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' |
                                                                                                          ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4614)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 557830                         (: S S '/*' :)
                                  and $state[$p:lk] != 590598">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 3)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 557830                          (: S S '/*' :)
                                   or $state[$p:lk] = 590598">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4492">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1572                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3236                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3364                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4614                                       (: S ';' :)
                      and $state[$p:lk] != 4644                                       (: ';' ';' :)
                      and $state[$p:lk] != 197412                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410404                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426788                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 590628">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(36, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4358">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' |
                                                                                                    '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                    '@namespace' | '@page' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4614)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 557830                               (: S S '/*' :)
                            and $state[$p:lk] != 590598">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 3)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 557830                                (: S S '/*' :)
                             or $state[$p:lk] = 590598">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4492">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 36">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 804">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4388">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 8484">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 34                                       (: '/*' :)
                        and $state[$p:lk] != 66                                       (: '}' :)
                        and $state[$p:lk] != 774                                      (: S S :)
                        and $state[$p:lk] != 1542                                     (: S IDENT :)
                        and $state[$p:lk] != 1572                                     (: ';' IDENT :)
                        and $state[$p:lk] != 3206                                     (: S '&quot;' :)
                        and $state[$p:lk] != 3236                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 3334                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 3364                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 4358                                     (: S '/*' :)
                        and $state[$p:lk] != 4614                                     (: S ';' :)
                        and $state[$p:lk] != 4644                                     (: ';' ';' :)
                        and $state[$p:lk] != 8454                                     (: S '}' :)
                        and $state[$p:lk] != 197412                                   (: ';' S IDENT :)
                        and $state[$p:lk] != 410404                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 426788                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 590628">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 2)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4358">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 8454">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' |
                                                                                                          ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4614)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66                             (: '}' :)
                                  and $state[$p:lk] != 557830                         (: S S '/*' :)
                                  and $state[$p:lk] != 590598">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 3)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 557830                          (: S S '/*' :)
                                   or $state[$p:lk] = 590598">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4492">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 34                             (: '/*' :)
                                  and $state[$p:lk] != 36                             (: ';' :)
                                  and $state[$p:lk] != 66">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 2, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1572                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3236                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3364                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4614                                       (: S ';' :)
                      and $state[$p:lk] != 4644                                       (: ';' ';' :)
                      and $state[$p:lk] != 197412                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410404                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426788                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 590628">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4358">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 8454">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' |
                                                                                                    '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                    '@namespace' | '@page' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4614)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66                                   (: '}' :)
                            and $state[$p:lk] != 557830                               (: S S '/*' :)
                            and $state[$p:lk] != 590598">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 3)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 557830                                (: S S '/*' :)
                             or $state[$p:lk] = 590598">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4492">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(68, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 34                                   (: '/*' :)
                            and $state[$p:lk] != 36                                   (: ';' :)
                            and $state[$p:lk] != 66">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 34">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3106">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494626">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 1)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 34">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-rule-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-rule-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 36">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 8454">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' |
                                                                                                        '@' | '@charset' | '@import' | '@media' |
                                                                                                        '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                        '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 34                               (: '/*' :)
                                and $state[$p:lk] != 66                               (: '}' :)
                                and $state[$p:lk] != 4358">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 5)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4358">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 66                                            (: '}' :)
                     or $state[$p:lk] = 8454                                          (: S '}' :)
                     or $state[$p:lk] = 1082118">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(36, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 8454">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(79, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                                  '@charset' | '@import' | '@media' | '@media print' |
                                                                                                  '@namespace' | '@page' | '[' | '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 34                                     (: '/*' :)
                          and $state[$p:lk] != 66                                     (: '}' :)
                          and $state[$p:lk] != 4358">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 5)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4358">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 34">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(64, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(76, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@media print' | '@namespace' |
                                                                                         '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(76, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@media print' | '@namespace' |
                                                                                         '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 39                                      (: '@charset' :)
                           or $state[$p:l1] = 43">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40">                                  <!-- '@import' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-import($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 41">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 42">                                  <!-- '@media print' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-printcssquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
          <xsl:sequence select="p:parse-css-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 16384 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   ! Memoize the backtracking result that was computed at decision point
   ! $dpi for input position $e0. Reconstruct state from the parameters.
   !
   ! @param $state the lexer state to be restored.
   ! @param $update the lexer state containing updates.
   ! @param $dpi the decision point id.
   ! @param $e0 the input position.
   ! @param $v the id of the successful alternative.
   ! @param $lk the new lookahead code.
   ! @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 32 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 32 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:choose>
          <xsl:when test="empty($result/self::ERROR)">
            <xsl:sequence select="$result"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>